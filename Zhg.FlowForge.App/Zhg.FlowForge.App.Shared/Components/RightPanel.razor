@using Microsoft.AspNetCore.Components
@using Zhg.FlowForge.App.Shared.Components.Form
@using Zhg.FlowForge.App.Shared.Models
@implements IDisposable

<!-- 右侧属性面板 - 紧凑优化版 -->
<div class="@GetPanelClass()">
    <!-- 面板头部 -->
    <div class="flex h-10 items-center justify-between border-b border-fuchsia-200/60 bg-gradient-to-r from-fuchsia-50 via-pink-50 to-rose-50 px-3 shadow-sm backdrop-blur-md">
        <span class="text-xs font-semibold tracking-wide text-fuchsia-700">属性面板</span>
        <div class="flex items-center gap-1.5">
            <div class="flex h-6 w-6 items-center justify-center rounded-md bg-gradient-to-br from-fuchsia-500 to-pink-500 shadow-sm">
                <i class="fas fa-sliders-h text-[10px] text-white"></i>
            </div>
            <button @onclick="Close"
                    class="flex h-6 w-6 items-center justify-center rounded-md border border-fuchsia-200 bg-white/90 text-fuchsia-600 transition-all hover:scale-105 hover:border-fuchsia-300 hover:bg-fuchsia-50 active:scale-95 xl:hidden">
                <i class="fas fa-times text-xs"></i>
            </button>
        </div>
    </div>

    <!-- 面板内容 -->
    <div class="flex-1 overflow-y-auto p-2.5" style="max-height: calc(100vh - 6.5rem);">
        @if (string.IsNullOrEmpty(SelectedElementId))
        {
            <!-- 空状态 -->
            <div class="flex h-full flex-col items-center justify-center py-12 text-center">
                <div class="mb-3 flex h-14 w-14 items-center justify-center rounded-xl bg-gradient-to-br from-violet-100 via-fuchsia-100 to-pink-100 shadow-md">
                    <i class="fas fa-mouse-pointer text-xl text-violet-500"></i>
                </div>
                <p class="text-xs font-semibold text-slate-700">未选中元素</p>
                <p class="mt-1 text-[11px] text-slate-500">点击画布元素查看属性</p>
            </div>
        }
        else
        {
            <div class="flex flex-col space-y-2.5">
                <!-- 基本属性 -->
                <PropertySection Title="基本属性" Icon="fa-cog" IsVisible="true" Color="blue">
                    <div class="flex flex-col space-y-2">
                        <FormGroup Label="元素类型" Icon="fa-shapes" Color="violet">
                            <input type="text"
                                   class="w-full rounded-md border border-violet-200 bg-gradient-to-r from-violet-50 to-purple-50 px-2 py-1.5 text-xs font-medium text-violet-700 transition-all focus:border-violet-400 focus:ring-1 focus:ring-violet-100 focus:outline-none"
                                   value="@SelectedElementType" disabled />
                        </FormGroup>

                        <FormGroup Label="ID" Icon="fa-id-card" Color="cyan">
                            <input type="text"
                                   class="w-full rounded-md border border-cyan-200 bg-white px-2 py-1.5 text-xs text-slate-700 transition-all hover:border-cyan-300 focus:border-cyan-400 focus:ring-1 focus:ring-cyan-100 focus:outline-none"
                                   value="@SelectedElementId"
                                   @oninput="@(async (e) => await OnUpdateProperty.InvokeAsync(("id", e.Value?.ToString())))" />
                        </FormGroup>

                        <FormGroup Label="名称" Icon="fa-font" Color="indigo">
                            <input type="text"
                                   class="w-full rounded-md border border-indigo-200 bg-white px-2 py-1.5 text-xs text-slate-700 transition-all hover:border-indigo-300 focus:border-indigo-400 focus:ring-1 focus:ring-indigo-100 focus:outline-none"
                                   value="@SelectedElementName"
                                   @oninput="@(async (e) => await OnUpdateProperty.InvokeAsync(("name", e.Value?.ToString())))" />
                        </FormGroup>

                        <FormGroup Label="文档说明" Icon="fa-file-alt" Color="amber">
                            <textarea class="min-h-[60px] w-full resize-y rounded-md border border-amber-200 bg-white px-2 py-1.5 text-xs leading-relaxed text-slate-700 transition-all hover:border-amber-300 focus:border-amber-400 focus:ring-1 focus:ring-amber-100 focus:outline-none"
                                      @oninput="@(async (e) => await OnUpdateDocumentation.InvokeAsync(e.Value?.ToString()))"></textarea>
                        </FormGroup>
                    </div>
                </PropertySection>

                <!-- 连线属性 - 仅在选中连线时显示 -->
                @if (IsSequenceFlowSelected)
                {
                    <PropertySection Title="连线属性" Icon="fa-link" IsVisible="true" Color="emerald">
                        <div class="flex flex-col space-y-2">
                            <FormGroup Label="条件表达式" Icon="fa-code" Color="emerald">
                                <div class="flex flex-col space-y-1.5">
                                    <!-- 左值 -->
                                    <div class="flex flex-col">
                                        <label class="mb-1 font-medium text-[10px] text-slate-600">左值</label>
                                        <input type="text"
                                               class="w-full rounded-md border border-emerald-200 bg-white px-2 py-1.5 text-xs text-slate-700 transition-all focus:border-emerald-400 focus:ring-1 focus:ring-emerald-100 focus:outline-none"
                                               placeholder="变量或表达式"
                                               value="@ConditionLeftValue"
                                               list="condition-left-suggestions"
                                               @onchange="@(async (e) => { ConditionLeftValue = e.Value?.ToString() ?? ""; await UpdateConditionExpression(); })" />
                                        <datalist id="condition-left-suggestions">
                                            <option value="string">String (字符串)</option>
                                            <option value="long">Long (长整型)</option>
                                            <option value="boolean">Boolean (布尔)</option>
                                            <option value="json">JSON (对象)</option>
                                        </datalist>
                                    </div>

                                    <!-- 逻辑表达式 -->
                                    <div class="flex flex-col">
                                        <label class="mb-1 font-medium text-[10px] text-slate-600">运算符</label>
                                        <select class="w-full rounded-md border border-emerald-200 bg-white px-2 py-1.5 text-xs text-slate-700 transition-all focus:border-emerald-400 focus:ring-1 focus:ring-emerald-100 focus:outline-none"
                                                value="@ConditionOperator"
                                                @onchange="@(async (e) => { ConditionOperator = e.Value?.ToString() ?? "=="; await UpdateConditionExpression(); })">
                                            <option value="==">等于 (==)</option>
                                            <option value="!=">不等于 (!=)</option>
                                            <option value=">">大于 (>)</option>
                                            <option value=">=">大于等于 (>=)</option>
                                            <option value="<">小于 (&lt;)</option>
                                            <option value="<=">小于等于 (&lt;=)</option>
                                            <option value="contains">包含 (contains)</option>
                                            <option value="startsWith">开头为 (startsWith)</option>
                                            <option value="endsWith">结尾为 (endsWith)</option>
                                        </select>
                                    </div>

                                    <!-- 右值 -->
                                    <div class="flex flex-col">
                                        <label class="mb-1 font-medium text-[10px] text-slate-600">右值</label>
                                        <input type="text"
                                               class="w-full rounded-md border border-emerald-200 bg-white px-2 py-1.5 text-xs text-slate-700 transition-all focus:border-emerald-400 focus:ring-1 focus:ring-emerald-100 focus:outline-none"
                                               placeholder="值或表达式"
                                               value="@ConditionRightValue"
                                               list="condition-right-suggestions"
                                               @onchange="@(async (e) => { ConditionRightValue = e.Value?.ToString() ?? ""; await UpdateConditionExpression(); })" />
                                        <datalist id="condition-right-suggestions">
                                            <option value="string">String (字符串)</option>
                                            <option value="long">Long (长整型)</option>
                                            <option value="boolean">Boolean (布尔)</option>
                                            <option value="json">JSON (对象)</option>
                                        </datalist>
                                    </div>
                                </div>
                            </FormGroup>
                        </div>
                    </PropertySection>
                }

                <!-- 任务配置 - 仅在选中任务时显示 -->
                @if (IsTaskSelected)
                {
                    <PropertySection Title="任务配置" Icon="fa-cogs" IsVisible="true" Color="purple">
                        <div class="flex flex-col space-y-2">
                            <FormGroup Label="处理类" Icon="fa-code" Color="purple">
                                <input type="text"
                                       class="w-full rounded-md border border-purple-200 bg-white px-2 py-1.5 text-xs text-slate-700 transition-all hover:border-purple-300 focus:border-purple-400 focus:ring-1 focus:ring-purple-100 focus:outline-none"
                                       placeholder="com.example.Handler"
                                       @oninput="async (e) => await OnUpdateServiceClass.InvokeAsync(e.Value?.ToString())" />
                            </FormGroup>

                            <!-- 输入参数 -->
                            <div class="flex flex-col space-y-1.5">
                                <label class="flex items-center gap-1.5 text-xs font-semibold text-blue-700">
                                    <i class="fas fa-sign-in-alt text-[10px] text-blue-500"></i> 输入参数
                                </label>
                                <div class="flex flex-col space-y-1.5">
                                    @foreach (var param in InputParameters)
                                    {
                                        <div class="rounded-md border border-blue-200 bg-gradient-to-br from-blue-50/50 to-cyan-50/50 p-2 shadow-sm">
                                            <!-- 参数名 -->
                                            <div class="mb-1.5 flex items-center gap-1.5">
                                                <input type="text"
                                                       class="min-w-0 flex-1 rounded-md border border-blue-200 bg-white px-2 py-1 text-xs transition-all focus:border-blue-400 focus:ring-1 focus:ring-blue-100 focus:outline-none"
                                                       placeholder="参数名"
                                                       value="@param.Name"
                                                       list="param-name-suggestions"
                                                       @onchange="@(async (e) => await UpdateInputParamField(param, "name", e.Value?.ToString()))" />
                                                <button class="flex h-6 w-6 flex-shrink-0 items-center justify-center rounded-md border border-rose-200 bg-white text-rose-500 transition-all hover:scale-105 hover:border-rose-300 hover:bg-rose-50 active:scale-95"
                                                        @onclick="async () => await OnRemoveInputParam.InvokeAsync(param)">
                                                    <i class="fas fa-times text-[10px]"></i>
                                                </button>
                                            </div>
                                            <datalist id="param-name-suggestions">
                                                <option value="string">String (字符串)</option>
                                                <option value="long">Long (长整型)</option>
                                                <option value="boolean">Boolean (布尔)</option>
                                                <option value="json">JSON (对象)</option>
                                            </datalist>

                                            <!-- 类型 -->
                                            <div class="mb-1.5">
                                                <select class="w-full rounded-md border border-blue-200 bg-white px-2 py-1 text-xs transition-all focus:border-blue-400 focus:ring-1 focus:ring-blue-100 focus:outline-none"
                                                        value="@param.Type"
                                                        @onchange="@(async (e) => await UpdateInputParamField(param, "type", e.Value?.ToString()))">
                                                    <option value="string">String (字符串)</option>
                                                    <option value="long">Long (长整型)</option>
                                                    <option value="boolean">Boolean (布尔)</option>
                                                    <option value="json">JSON (对象)</option>
                                                </select>
                                            </div>

                                            <!-- 值或表达式 -->
                                            <div>
                                                <input type="text"
                                                       class="w-full rounded-md border border-blue-200 bg-white px-2 py-1 text-xs transition-all focus:border-blue-400 focus:ring-1 focus:ring-blue-100 focus:outline-none"
                                                       placeholder="值或表达式 (如: ${variable})"
                                                       value="@param.Value"
                                                       list="input-value-suggestions"
                                                       @onchange="@(async (e) => await UpdateInputParamField(param, "value", e.Value?.ToString()))" />
                                                <datalist id="input-value-suggestions">
                                                    <option value="string">String (字符串)</option>
                                                    <option value="long">Long (长整型)</option>
                                                    <option value="boolean">Boolean (布尔)</option>
                                                    <option value="json">JSON (对象)</option>
                                                </datalist>
                                            </div>
                                        </div>
                                    }
                                </div>
                                <button class="group flex w-full items-center justify-center gap-1.5 rounded-md border-2 border-dashed border-blue-300 bg-gradient-to-r from-blue-50/50 to-cyan-50/50 px-2 py-1.5 text-xs font-medium text-blue-600 transition-all hover:scale-[1.02] hover:border-blue-400 hover:from-blue-100 hover:to-cyan-100 active:scale-98"
                                        @onclick="@(async () => await OnAddInputParam.InvokeAsync())">
                                    <i class="fas fa-plus text-[10px] transition-transform group-hover:rotate-90"></i> 添加输入参数
                                </button>
                            </div>

                            <!-- 输出参数 -->
                            <div class="flex flex-col space-y-1.5">
                                <label class="flex items-center gap-1.5 text-xs font-semibold text-emerald-700">
                                    <i class="fas fa-sign-out-alt text-[10px] text-emerald-500"></i> 输出参数
                                </label>
                                <div class="flex flex-col space-y-1.5">
                                    @foreach (var param in OutputParameters)
                                    {
                                        <div class="rounded-md border border-emerald-200 bg-gradient-to-br from-emerald-50/50 to-teal-50/50 p-2 shadow-sm">
                                            <!-- 参数名 -->
                                            <div class="mb-1.5 flex items-center gap-1.5">
                                                <input type="text"
                                                       class="min-w-0 flex-1 rounded-md border border-emerald-200 bg-white px-2 py-1 text-xs transition-all focus:border-emerald-400 focus:ring-1 focus:ring-emerald-100 focus:outline-none"
                                                       placeholder="参数名"
                                                       value="@param.Name"
                                                       list="output-name-suggestions"
                                                       @onchange="@(async (e) => await UpdateOutputParamField(param, "name", e.Value?.ToString()))" />
                                                <button class="flex h-6 w-6 flex-shrink-0 items-center justify-center rounded-md border border-rose-200 bg-white text-rose-500 transition-all hover:scale-105 hover:border-rose-300 hover:bg-rose-50 active:scale-95"
                                                        @onclick="async () => await OnRemoveOutputParam.InvokeAsync(param)">
                                                    <i class="fas fa-times text-[10px]"></i>
                                                </button>
                                            </div>
                                            <datalist id="output-name-suggestions">
                                                <option value="string">String (字符串)</option>
                                                <option value="long">Long (长整型)</option>
                                                <option value="boolean">Boolean (布尔)</option>
                                                <option value="json">JSON (对象)</option>
                                            </datalist>

                                            <!-- 类型 -->
                                            <div class="mb-1.5">
                                                <select class="w-full rounded-md border border-emerald-200 bg-white px-2 py-1 text-xs transition-all focus:border-emerald-400 focus:ring-1 focus:ring-emerald-100 focus:outline-none"
                                                        value="@param.Type"
                                                        @onchange="@(async (e) => await UpdateOutputParamField(param, "type", e.Value?.ToString()))">
                                                    <option value="string">String (字符串)</option>
                                                    <option value="long">Long (长整型)</option>
                                                    <option value="boolean">Boolean (布尔)</option>
                                                    <option value="json">JSON (对象)</option>
                                                </select>
                                            </div>

                                            <!-- 值或表达式 -->
                                            <div>
                                                <input type="text"
                                                       class="w-full rounded-md border border-emerald-200 bg-white px-2 py-1 text-xs transition-all focus:border-emerald-400 focus:ring-1 focus:ring-emerald-100 focus:outline-none"
                                                       placeholder="值或表达式 (如: ${result})"
                                                       value="@param.Value"
                                                       list="output-value-suggestions"
                                                       @onchange="@(async (e) => await UpdateOutputParamField(param, "value", e.Value?.ToString()))" />
                                                <datalist id="output-value-suggestions">
                                                    <option value="string">String (字符串)</option>
                                                    <option value="long">Long (长整型)</option>
                                                    <option value="boolean">Boolean (布尔)</option>
                                                    <option value="json">JSON (对象)</option>
                                                </datalist>
                                            </div>
                                        </div>
                                    }
                                </div>
                                <button class="group flex w-full items-center justify-center gap-1.5 rounded-md border-2 border-dashed border-emerald-300 bg-gradient-to-r from-emerald-50/50 to-teal-50/50 px-2 py-1.5 text-xs font-medium text-emerald-600 transition-all hover:scale-[1.02] hover:border-emerald-400 hover:from-emerald-100 hover:to-teal-100 active:scale-98"
                                        @onclick="async () => await OnAddOutputParam.InvokeAsync()">
                                    <i class="fas fa-plus text-[10px] transition-transform group-hover:rotate-90"></i> 添加输出参数
                                </button>
                            </div>
                        </div>
                    </PropertySection>
                }
            </div>
        }
    </div>
</div>

<!-- 模态遮罩 - 仅在面板打开且为平板/手机端时显示 -->
@if (IsOpen)
{
    <div class="fixed inset-0 z-30 bg-black/30 backdrop-blur-sm transition-opacity xl:hidden"
         @onclick="Close"></div>
}

<style>
    /* 滚动条样式 */
    .overflow-y-auto::-webkit-scrollbar {
        width: 5px;
    }

    .overflow-y-auto::-webkit-scrollbar-track {
        background: #fdf2f8;
        border-radius: 2.5px;
    }

    .overflow-y-auto::-webkit-scrollbar-thumb {
        background: linear-gradient(to bottom, #fbcfe8, #f9a8d4);
        border-radius: 2.5px;
    }

    .overflow-y-auto::-webkit-scrollbar-thumb:hover {
        background: linear-gradient(to bottom, #f9a8d4, #f472b6);
    }
</style>

@code {
    [Parameter] public bool IsOpen { get; set; } = true;
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public string? SelectedElementId { get; set; }
    [Parameter] public string SelectedElementType { get; set; } = string.Empty;
    [Parameter] public string SelectedElementName { get; set; } = string.Empty;
    [Parameter] public bool IsSequenceFlowSelected { get; set; }
    [Parameter] public bool IsTaskSelected { get; set; }
    [Parameter] public List<BpmnParameter> InputParameters { get; set; } = new();
    [Parameter] public List<BpmnParameter> OutputParameters { get; set; } = new();

    [Parameter] public EventCallback<(string key, string? value)> OnUpdateProperty { get; set; }
    [Parameter] public EventCallback<string?> OnUpdateDocumentation { get; set; }
    [Parameter] public EventCallback<string?> OnUpdateServiceClass { get; set; }
    [Parameter] public EventCallback OnAddInputParam { get; set; }
    [Parameter] public EventCallback OnAddOutputParam { get; set; }
    [Parameter] public EventCallback OnOpenConditionBuilder { get; set; }
    [Parameter] public EventCallback<BpmnParameter> OnRemoveInputParam { get; set; }
    [Parameter] public EventCallback<BpmnParameter> OnRemoveOutputParam { get; set; }
    [Parameter] public EventCallback<BpmnParameter> OnUpdateInputParam { get; set; }
    [Parameter] public EventCallback<BpmnParameter> OnUpdateOutputParam { get; set; }

    // 条件表达式状态
    private string ConditionLeftValue { get; set; } = "";
    private string ConditionOperator { get; set; } = "==";
    private string ConditionRightValue { get; set; } = "";

    protected override void OnParametersSet()
    {
        // 当选中连线时，解析现有条件表达式
        if (IsSequenceFlowSelected && !string.IsNullOrEmpty(SelectedElementId))
        {
            ParseConditionExpression();
        }
    }

    private async Task Close()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
        await OnClose.InvokeAsync();
    }

    private string GetPanelClass()
    {
        var baseClass = "flex flex-col border-l border-fuchsia-200/60 bg-white/95 shadow-xl backdrop-blur-sm transition-all duration-300 ease-in-out";

        if (IsOpen)
        {
            return $"{baseClass} fixed right-0 top-14 bottom-0 z-40 w-72 translate-x-0 xl:relative xl:top-0 xl:w-72";
        }
        else
        {
            return $"{baseClass} fixed right-0 top-14 bottom-0 z-40 w-72 translate-x-full xl:w-0 xl:overflow-hidden";
        }
    }

    private void ParseConditionExpression()
    {
        // 这里可以解析已有的条件表达式
        // 暂时留空，后续可以从 BPMN 中读取
    }

    private async Task UpdateConditionExpression()
    {
        if (string.IsNullOrEmpty(ConditionLeftValue) || string.IsNullOrEmpty(ConditionRightValue))
            return;

        // 构建条件表达式
        string expression = "";
        
        if (ConditionOperator == "contains")
        {
            expression = $"{ConditionLeftValue}.contains({ConditionRightValue})";
        }
        else if (ConditionOperator == "startsWith")
        {
            expression = $"{ConditionLeftValue}.startsWith({ConditionRightValue})";
        }
        else if (ConditionOperator == "endsWith")
        {
            expression = $"{ConditionLeftValue}.endsWith({ConditionRightValue})";
        }
        else
        {
            expression = $"{ConditionLeftValue} {ConditionOperator} {ConditionRightValue}";
        }

        // 调用 OnUpdateProperty 更新条件表达式
        await OnUpdateProperty.InvokeAsync(("conditionExpression", expression));
    }

    private async Task UpdateInputParamField(BpmnParameter param, string field, string? value)
    {
        if (value is null) return;

        switch (field.Trim())
        {
            case "name": param.Name = value; break;
            case "type": param.Type = value; break;
            case "value": param.Value = value; break;
        }

        await OnUpdateInputParam.InvokeAsync(param);
    }

    private async Task UpdateOutputParamField(BpmnParameter param, string field, string? value)
    {
        if (value is null) return;

        switch (field.Trim())
        {
            case "name": param.Name = value; break;
            case "type": param.Type = value; break;
            case "value": param.Value = value; break;
        }

        await OnUpdateOutputParam.InvokeAsync(param);
    }

    public void Dispose() { }
}