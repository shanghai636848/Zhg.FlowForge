@using Microsoft.AspNetCore.Components
@using Zhg.FlowForge.App.Shared.Models
@implements IDisposable

<div class="flex w-80 flex-col overflow-hidden border-l border-gray-200 bg-white">
    <!-- 面板头部 -->
    <div class="flex items-center justify-between border-b border-gray-200 bg-gray-50 px-4 py-3">
        <span class="text-sm font-semibold tracking-wide text-gray-700 uppercase">属性面板</span>
        <i class="fas fa-sliders-h text-sm text-gray-500"></i>
    </div>

    <!-- 面板内容 -->
    <div id="property-content" class="flex flex-1 flex-col space-y-5 overflow-y-auto p-4">
        @if (string.IsNullOrEmpty(SelectedElementId))
        {
            <!-- 空状态 -->
            <div class="flex h-full flex-col items-center justify-center py-8 text-center text-gray-500">
                <div class="empty-icon mb-4 text-4xl opacity-50">
                    <i class="fas fa-mouse-pointer"></i>
                </div>
                <p class="text-lg font-medium">未选中任何元素</p>
                <p class="mt-2 text-sm">请在画布中点击选择一个元素以查看其属性</p>
            </div>
        }
        else
        {
            <!-- 基本属性部分 -->
            <PropertySection Title="基本属性" Icon="fa-cog" IsVisible="true">
                <div class="flex flex-col space-y-3">
                    <FormGroup Label="元素类型" Icon="fa-shapes">
                        <input type="text" class="w-full rounded border border-gray-200 bg-white px-3 py-2 text-sm text-gray-900 transition-all duration-200 focus:border-blue-500 focus:ring-3 focus:ring-blue-100 focus:outline-none disabled:cursor-not-allowed disabled:bg-gray-50 disabled:text-gray-500"
                               value="@SelectedElementType" disabled />
                    </FormGroup>

                    <FormGroup Label="ID" Icon="fa-id-card">
                        <input type="text" class="w-full rounded border border-gray-200 bg-white px-3 py-2 text-sm text-gray-900 transition-all duration-200 focus:border-blue-500 focus:ring-3 focus:ring-blue-100 focus:outline-none"
                               value="@SelectedElementId"
                               @oninput="@(async (e) => await OnUpdateProperty.InvokeAsync((" id", e.Value?.ToString())))" />
                    </FormGroup>

                    <FormGroup Label="名称" Icon="fa-font">
                        <input type="text" class="w-full rounded border border-gray-200 bg-white px-3 py-2 text-sm text-gray-900 transition-all duration-200 focus:border-blue-500 focus:ring-3 focus:ring-blue-100 focus:outline-none"
                               value="@SelectedElementName"
                               @oninput="@(async (e) => await OnUpdateProperty.InvokeAsync((" name", e.Value?.ToString())))" />
                    </FormGroup>

                    <FormGroup Label="文档说明" Icon="fa-file-alt">
                        <textarea class="h-auto min-h-20 w-full resize-y rounded border border-gray-200 bg-white px-3 py-2 font-mono text-sm text-gray-900 transition-all duration-200 focus:border-blue-500 focus:ring-3 focus:ring-blue-100 focus:outline-none"
                                  @oninput="@(async (e) => await OnUpdateDocumentation.InvokeAsync(e.Value?.ToString()))"></textarea>
                    </FormGroup>
                </div>
            </PropertySection>

            <!-- 连线属性部分 -->
            <PropertySection Title="连线属性" Icon="fa-link" IsVisible="IsSequenceFlowSelected">
                <!-- 连线属性内容保持不变 -->
            </PropertySection>

            <!-- 任务配置部分 -->
            <PropertySection Title="任务配置" Icon="fa-cogs" IsVisible="IsTaskSelected">
                <div class="flex flex-col space-y-4">
                    <FormGroup Label="处理类" Icon="fa-code">
                        <input type="text" class="w-full rounded border border-gray-200 bg-white px-3 py-2 text-sm text-gray-900 transition-all duration-200 focus:border-blue-500 focus:ring-3 focus:ring-blue-100 focus:outline-none"
                               placeholder="com.example.Handler"
                               @oninput="async (e) => await OnUpdateServiceClass.InvokeAsync(e.Value?.ToString())" />
                    </FormGroup>

                    <!-- 输入参数 -->
                    <div class="flex flex-col space-y-2">
                        <label class="mt-2 flex items-center text-sm font-medium font-semibold text-gray-700">
                            <i class="fas fa-sign-in-alt mr-2"></i> 输入参数
                        </label>
                        <div class="flex flex-col space-y-3" id="input-params">
                            @foreach (var param in InputParameters)
                            {
                                <div class="param-item rounded border bg-gray-50 p-3">
                                    <div class="mb-2 flex gap-2">
                                        <input type="text"
                                               class="form-input flex-2 px-3 py-2 text-sm"
                                               placeholder="参数名"
                                               value="@param.Name"
                                               @onchange="@(async (e) => await UpdateInputParamField(param,"name", e.Value?.ToString()))" />
                                        <select class="form-input px-3 py-2 text-sm"
                                                value="@param.Type"
                                                @onchange="@(async (e) => await UpdateInputParamField(param,"type", e.Value?.ToString()))">
                                            <option value="string">string</option>
                                            <option value="long">long</option>
                                            <option value="boolean">boolean</option>
                                            <option value="json">json</option>
                                        </select>
                                        <button class="param-remove h-8 w-8 rounded text-red-500 hover:bg-red-50"
                                                @onclick="async () => await OnRemoveInputParam.InvokeAsync(param)">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                    <div class="flex gap-2">
                                        <input type="text"
                                               class="form-input flex-1 px-3 py-2 text-sm"
                                               placeholder="值或表达式"
                                               value="@param.Value"
                                               @onchange="@(async (e) => await UpdateInputParamField(param,"value", e.Value?.ToString()))" />
                                    </div>
                                </div>
                            }
                        </div>
                        <button class="mt-2 flex w-full cursor-pointer items-center justify-center rounded border border-dashed border-gray-200 px-3 py-2 text-sm font-medium text-gray-500 transition-all duration-200 hover:border-blue-500 hover:bg-gray-50 hover:text-blue-500"
                                @onclick="@(async () => await OnAddInputParam.InvokeAsync())">
                            <i class="fas fa-plus mr-2"></i> 添加输入参数
                        </button>
                    </div>

                    <!-- 输出参数 -->
                    <div class="flex flex-col space-y-2">
                        <label class="mt-2 flex items-center text-sm font-medium font-semibold text-gray-700">
                            <i class="fas fa-sign-out-alt mr-2"></i> 输出参数
                        </label>
                        <div class="flex flex-col space-y-3" id="output-params">
                            @foreach (var param in OutputParameters)
                            {
                                <div class="param-item rounded border bg-gray-50 p-3">
                                    <div class="mb-2 flex gap-2">
                                        <input type="text"
                                               class="form-input flex-2 px-3 py-2 text-sm"
                                               placeholder="参数名"
                                               value="@param.Name"
                                               @onchange="@(async (e) => await UpdateOutputParamField(param,"name", e.Value?.ToString()))" />
                                        <select class="form-input px-3 py-2 text-sm"
                                                value="@param.Type"
                                                @onchange="@(async (e) => await UpdateOutputParamField(param,"type", e.Value?.ToString()))">
                                            <option value="string">string</option>
                                            <option value="long">long</option>
                                            <option value="boolean">boolean</option>
                                            <option value="json">json</option>
                                        </select>
                                        <button class="param-remove h-8 w-8 rounded text-red-500 hover:bg-red-50"
                                                @onclick="async () => await OnRemoveOutputParam.InvokeAsync(param)">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                    <div class="flex gap-2">
                                        <input type="text"
                                               class="form-input flex-1 px-3 py-2 text-sm"
                                               placeholder="值或表达式"
                                               value="@param.Value"
                                               @onchange="@(async (e) => await UpdateOutputParamField(param,"value", e.Value?.ToString()))" />
                                    </div>
                                </div>
                            }
                        </div>
                        <button class="mt-2 flex w-full cursor-pointer items-center justify-center rounded border border-dashed border-gray-200 px-3 py-2 text-sm font-medium text-gray-500 transition-all duration-200 hover:border-blue-500 hover:bg-gray-50 hover:text-blue-500"
                                @onclick="async () => await OnAddOutputParam.InvokeAsync()">
                            <i class="fas fa-plus mr-2"></i> 添加输出参数
                        </button>
                    </div>
                </div>
            </PropertySection>
        }
    </div>
</div>

@code {
    [Parameter] public string? SelectedElementId { get; set; }
    [Parameter] public string SelectedElementType { get; set; } = string.Empty;
    [Parameter] public string SelectedElementName { get; set; } = string.Empty;
    [Parameter] public bool IsSequenceFlowSelected { get; set; }
    [Parameter] public bool IsTaskSelected { get; set; }
    [Parameter] public List<BpmnParameter> InputParameters { get; set; } = new();
    [Parameter] public List<BpmnParameter> OutputParameters { get; set; } = new();

    [Parameter] public EventCallback<(string key, string? value)> OnUpdateProperty { get; set; }
    [Parameter] public EventCallback<string?> OnUpdateDocumentation { get; set; }
    [Parameter] public EventCallback<string?> OnUpdateServiceClass { get; set; }
    [Parameter] public EventCallback OnAddInputParam { get; set; }
    [Parameter] public EventCallback OnAddOutputParam { get; set; }
    [Parameter] public EventCallback OnOpenConditionBuilder { get; set; }
    [Parameter] public EventCallback<BpmnParameter> OnRemoveInputParam { get; set; }
    [Parameter] public EventCallback<BpmnParameter> OnRemoveOutputParam { get; set; }
    [Parameter] public EventCallback<BpmnParameter> OnUpdateInputParam { get; set; }
    [Parameter] public EventCallback<BpmnParameter> OnUpdateOutputParam { get; set; }

    private async Task UpdateInputParamField(BpmnParameter param, string field, string? value)
    {
        if (value is null) return;

        switch (field.Trim())
        {
            case "name": param.Name = value; break;
            case "type": param.Type = value; break;
            case "value": param.Value = value; break;
        }

        await OnUpdateInputParam.InvokeAsync(param);
    }

    private async Task UpdateOutputParamField(BpmnParameter param, string field, string? value)
    {
        if (value is null) return;

        switch (field.Trim())
        {
            case "name": param.Name = value; break;
            case "type": param.Type = value; break;
            case "value": param.Value = value; break;
        }

        await OnUpdateOutputParam.InvokeAsync(param);
    }

    protected override void OnInitialized()
    {
        Console.WriteLine("RightPanel initialized");
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine($"RightPanel parameters updated - ID: {SelectedElementId}, Type: {SelectedElementType}, Name: {SelectedElementName}");
        Console.WriteLine($"Input params: {InputParameters.Count}, Output params: {OutputParameters.Count}");

        // 强制重新渲染
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("RightPanel first render");
        }
        else
        {
            Console.WriteLine("RightPanel re-rendered");
        }
    }

    public void Dispose()
    {
        Console.WriteLine("RightPanel disposed");
    }
}