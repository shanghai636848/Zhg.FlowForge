

<!-- ============================================ -->
<!-- ToolItem.razor - 工具项组件 -->
<!-- ============================================ -->
@* @page "/components/tool-item" *@
@inject IJSRuntime JSRuntime

<div class="group relative flex h-12 w-full cursor-grab flex-col items-center justify-center overflow-hidden rounded-lg border @GetBorderColor() bg-gradient-to-br @GetGradient() shadow-sm transition-all hover:scale-110 hover:@GetHoverBorder() hover:shadow-lg active:cursor-grabbing active:scale-95"
     @onmousedown="OnMouseDown">
    <!-- 背景光效 -->
    <div class="absolute inset-0 opacity-0 transition-opacity duration-300 group-hover:opacity-100 @GetShineGradient()"></div>

    <div class="relative z-10 flex items-center justify-center text-sm @GetIconColor() transition-all group-hover:scale-125 group-hover:rotate-12">
        <i class="fas @Icon"></i>
    </div>
    <div class="relative z-10 mt-0.5 text-[10px] font-bold leading-tight @GetTextColor() transition-colors group-hover:@GetHoverTextColor()">
        @Label
    </div>
</div>

@code {
    [Parameter] public string Type { get; set; } = "";
    [Parameter] public string Icon { get; set; } = "";
    [Parameter] public string Label { get; set; } = "";
    [Parameter] public string Color { get; set; } = "blue";

    private async Task OnMouseDown(MouseEventArgs e)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("createBpmnElement", Type, new
            {
                clientX = e.ClientX,
                clientY = e.ClientY,
                pageX = e.PageX,
                pageY = e.PageY
            });
        }
        catch (JSException ex)
        {
            Console.WriteLine($"Error creating BPMN element: {ex.Message}");
        }
    }

    private string GetBorderColor() => Color switch
    {
        "emerald" => "border-emerald-200",
        "rose" => "border-rose-200",
        "amber" => "border-amber-200",
        "blue" => "border-blue-200",
        "indigo" => "border-indigo-200",
        "purple" => "border-purple-200",
        "slate" => "border-slate-200",
        "violet" => "border-violet-200",
        "orange" => "border-orange-200",
        "teal" => "border-teal-200",
        "fuchsia" => "border-fuchsia-200",
        "pink" => "border-pink-200",
        "yellow" => "border-yellow-200",
        "green" => "border-green-200",
        "cyan" => "border-cyan-200",
        "sky" => "border-sky-200",
        _ => "border-slate-200"
    };

    private string GetGradient() => Color switch
    {
        "emerald" => "from-emerald-50 via-white to-teal-50",
        "rose" => "from-rose-50 via-white to-pink-50",
        "amber" => "from-amber-50 via-white to-yellow-50",
        "blue" => "from-blue-50 via-white to-cyan-50",
        "indigo" => "from-indigo-50 via-white to-purple-50",
        "purple" => "from-purple-50 via-white to-fuchsia-50",
        "slate" => "from-slate-50 via-white to-gray-50",
        "violet" => "from-violet-50 via-white to-purple-50",
        "orange" => "from-orange-50 via-white to-amber-50",
        "teal" => "from-teal-50 via-white to-cyan-50",
        "fuchsia" => "from-fuchsia-50 via-white to-pink-50",
        "pink" => "from-pink-50 via-white to-rose-50",
        "yellow" => "from-yellow-50 via-white to-amber-50",
        "green" => "from-green-50 via-white to-emerald-50",
        "cyan" => "from-cyan-50 via-white to-blue-50",
        "sky" => "from-sky-50 via-white to-blue-50",
        _ => "from-white to-slate-50"
    };

    private string GetHoverBorder() => $"border-{Color}-300";
    private string GetIconColor() => $"text-{Color}-500";
    private string GetTextColor() => Color == "slate" ? "text-slate-600" : "text-slate-700";
    private string GetHoverTextColor() => $"text-{Color}-700";
    private string GetShineGradient() => $"bg-gradient-to-br from-{Color}-100 to-{(Color == "emerald" ? "teal" : Color == "rose" ? "pink" : Color)}-100";
}


