<!-- 工具项组件 - 丰富色彩版 -->
<div class="group relative flex h-12 w-full cursor-grab flex-col items-center justify-center overflow-hidden rounded-lg border @GetBorderColor() bg-gradient-to-br @GetGradient() shadow-sm transition-all hover:scale-110 hover:@GetHoverBorder() hover:shadow-lg active:cursor-grabbing active:scale-95"
     @onmousedown="OnMouseDown">
    <!-- 背景光效 -->
    <div class="absolute inset-0 opacity-0 transition-opacity duration-300 group-hover:opacity-100 @GetShineGradient()"></div>

    <div class="relative z-10 flex items-center justify-center text-sm @GetIconColor() transition-all group-hover:scale-125 group-hover:rotate-12">
        <i class="fas @Icon"></i>
    </div>
    <div class="relative z-10 mt-0.5 text-[10px] font-bold leading-tight @GetTextColor() transition-colors group-hover:@GetHoverTextColor()">
        @Label
    </div>
</div>

@code {
    [Parameter] public string Type { get; set; } = "";
    [Parameter] public string Icon { get; set; } = "";
    [Parameter] public string Label { get; set; } = "";
    [Parameter] public string Color { get; set; } = "blue";

    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    private async Task OnMouseDown(MouseEventArgs e)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("createBpmnElement", Type, new
            {
                clientX = e.ClientX,
                clientY = e.ClientY,
                pageX = e.PageX,
                pageY = e.PageY
            });
        }
        catch (JSException ex)
        {
            Console.WriteLine($"Error creating BPMN element: {ex.Message}");
        }
    }

    private string GetBorderColor()
    {
        return Color switch
        {
            "emerald" => "border-emerald-200",
            "rose" => "border-rose-200",
            "amber" => "border-amber-200",
            "blue" => "border-blue-200",
            "indigo" => "border-indigo-200",
            "purple" => "border-purple-200",
            "slate" => "border-slate-200",
            "violet" => "border-violet-200",
            "orange" => "border-orange-200",
            "teal" => "border-teal-200",
            "fuchsia" => "border-fuchsia-200",
            "pink" => "border-pink-200",
            "yellow" => "border-yellow-200",
            "green" => "border-green-200",
            "cyan" => "border-cyan-200",
            "sky" => "border-sky-200",
            _ => "border-slate-200"
        };
    }

    private string GetGradient()
    {
        return Color switch
        {
            "emerald" => "from-emerald-50 via-white to-teal-50",
            "rose" => "from-rose-50 via-white to-pink-50",
            "amber" => "from-amber-50 via-white to-yellow-50",
            "blue" => "from-blue-50 via-white to-cyan-50",
            "indigo" => "from-indigo-50 via-white to-purple-50",
            "purple" => "from-purple-50 via-white to-fuchsia-50",
            "slate" => "from-slate-50 via-white to-gray-50",
            "violet" => "from-violet-50 via-white to-purple-50",
            "orange" => "from-orange-50 via-white to-amber-50",
            "teal" => "from-teal-50 via-white to-cyan-50",
            "fuchsia" => "from-fuchsia-50 via-white to-pink-50",
            "pink" => "from-pink-50 via-white to-rose-50",
            "yellow" => "from-yellow-50 via-white to-amber-50",
            "green" => "from-green-50 via-white to-emerald-50",
            "cyan" => "from-cyan-50 via-white to-blue-50",
            "sky" => "from-sky-50 via-white to-blue-50",
            _ => "from-white to-slate-50"
        };
    }

    private string GetHoverBorder()
    {
        return Color switch
        {
            "emerald" => "border-emerald-300",
            "rose" => "border-rose-300",
            "amber" => "border-amber-300",
            "blue" => "border-blue-300",
            "indigo" => "border-indigo-300",
            "purple" => "border-purple-300",
            "slate" => "border-slate-300",
            "violet" => "border-violet-300",
            "orange" => "border-orange-300",
            "teal" => "border-teal-300",
            "fuchsia" => "border-fuchsia-300",
            "pink" => "border-pink-300",
            "yellow" => "border-yellow-300",
            "green" => "border-green-300",
            "cyan" => "border-cyan-300",
            "sky" => "border-sky-300",
            _ => "border-slate-300"
        };
    }

    private string GetIconColor()
    {
        return Color switch
        {
            "emerald" => "text-emerald-500",
            "rose" => "text-rose-500",
            "amber" => "text-amber-500",
            "blue" => "text-blue-500",
            "indigo" => "text-indigo-500",
            "purple" => "text-purple-500",
            "slate" => "text-slate-500",
            "violet" => "text-violet-500",
            "orange" => "text-orange-500",
            "teal" => "text-teal-500",
            "fuchsia" => "text-fuchsia-500",
            "pink" => "text-pink-500",
            "yellow" => "text-yellow-500",
            "green" => "text-green-500",
            "cyan" => "text-cyan-500",
            "sky" => "text-sky-500",
            _ => "text-slate-500"
        };
    }

    private string GetTextColor()
    {
        return Color switch
        {
            "slate" => "text-slate-600",
            _ => "text-slate-700"
        };
    }

    private string GetHoverTextColor()
    {
        return Color switch
        {
            "emerald" => "text-emerald-700",
            "rose" => "text-rose-700",
            "amber" => "text-amber-700",
            "blue" => "text-blue-700",
            "indigo" => "text-indigo-700",
            "purple" => "text-purple-700",
            "slate" => "text-slate-900",
            "violet" => "text-violet-700",
            "orange" => "text-orange-700",
            "teal" => "text-teal-700",
            "fuchsia" => "text-fuchsia-700",
            "pink" => "text-pink-700",
            "yellow" => "text-yellow-700",
            "green" => "text-green-700",
            "cyan" => "text-cyan-700",
            "sky" => "text-sky-700",
            _ => "text-slate-900"
        };
    }

    private string GetShineGradient()
    {
        return Color switch
        {
            "emerald" => "bg-gradient-to-br from-emerald-100 to-teal-100",
            "rose" => "bg-gradient-to-br from-rose-100 to-pink-100",
            "amber" => "bg-gradient-to-br from-amber-100 to-yellow-100",
            "blue" => "bg-gradient-to-br from-blue-100 to-cyan-100",
            "indigo" => "bg-gradient-to-br from-indigo-100 to-purple-100",
            "purple" => "bg-gradient-to-br from-purple-100 to-fuchsia-100",
            "slate" => "bg-gradient-to-br from-slate-100 to-gray-100",
            "violet" => "bg-gradient-to-br from-violet-100 to-purple-100",
            "orange" => "bg-gradient-to-br from-orange-100 to-amber-100",
            "teal" => "bg-gradient-to-br from-teal-100 to-cyan-100",
            "fuchsia" => "bg-gradient-to-br from-fuchsia-100 to-pink-100",
            "pink" => "bg-gradient-to-br from-pink-100 to-rose-100",
            "yellow" => "bg-gradient-to-br from-yellow-100 to-amber-100",
            "green" => "bg-gradient-to-br from-green-100 to-emerald-100",
            "cyan" => "bg-gradient-to-br from-cyan-100 to-blue-100",
            "sky" => "bg-gradient-to-br from-sky-100 to-blue-100",
            _ => "bg-gradient-to-br from-slate-100 to-gray-100"
        };
    }
}