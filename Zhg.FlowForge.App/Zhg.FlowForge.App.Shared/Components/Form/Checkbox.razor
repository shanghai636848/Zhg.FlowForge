<div class="@ContainerClass">
    <label class="flex cursor-pointer items-center gap-2 @(Disabled ? "opacity-60 cursor-not-allowed" : "")">
        <input type="checkbox"
               class="@GetCheckboxClass()"
               checked="@Checked"
               disabled="@Disabled"
               @onchange="OnChangeHandler" />
        
        @if (ChildContent != null)
        {
            <span class="text-xs text-slate-700 select-none">
                @ChildContent
            </span>
        }
    </label>

    @if (!string.IsNullOrEmpty(HelpText))
    {
        <span class="mt-0.5 ml-6 block text-xs text-slate-500">@HelpText</span>
    }
</div>

@code {
    [Parameter] public bool Checked { get; set; }
    [Parameter] public string Size { get; set; } = "md"; // sm, md, lg
    [Parameter] public string ContainerClass { get; set; } = "";
    [Parameter] public string HelpText { get; set; } = "";
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback<bool> CheckedChanged { get; set; }

    private async Task OnChangeHandler(ChangeEventArgs e)
    {
        Checked = (bool)(e.Value ?? false);
        await CheckedChanged.InvokeAsync(Checked);
    }

    private string GetCheckboxClass()
    {
        var baseClass = "rounded border-slate-300 text-blue-600 transition-colors focus:ring-2 focus:ring-blue-500 focus:ring-offset-0";
        
        var sizeClass = Size switch
        {
            "sm" => "w-3 h-3",
            "lg" => "w-5 h-5",
            _ => "w-4 h-4"
        };

        return $"{baseClass} {sizeClass}";
    }
}