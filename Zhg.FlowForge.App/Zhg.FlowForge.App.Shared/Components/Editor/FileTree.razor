@using System.IO
@using Zhg.FlowForge.App.Shared.Models
@using Zhg.FlowForge.App.Shared.Services
@inject IJSRuntime JSRuntime

<div class="file-tree select-none">
    @if (Files != null && Files.Any())
    {
        @RenderFiles(Files, 0)
    }
    else
    {
        <div class="flex flex-col items-center justify-center py-8 text-sm text-slate-500">
            <i class="fas fa-folder-open mb-2 text-2xl"></i>
            <p>没有文件</p>
        </div>
    }
</div>

<!-- 右键菜单 -->
@if (_showContextMenu)
{
    <div class="fixed z-50 rounded-lg border border-slate-600 bg-slate-700 py-1 shadow-xl"
         style="left: @(_menuX)px; top: @(_menuY)px; min-width: 160px;"
         @onclick:stopPropagation="true">

        @if (_contextMenuFile?.IsFolder ?? false)
        {
            <!-- 文件夹菜单 -->
            <button class="flex w-full items-center gap-2 px-3 py-2 text-left text-xs text-slate-200 transition-colors hover:bg-slate-600"
                    @onclick="NewFileInFolder">
                <i class="fas fa-file-plus w-4 text-blue-400"></i>
                <span>新建文件</span>
            </button>
            <button class="flex w-full items-center gap-2 px-3 py-2 text-left text-xs text-slate-200 transition-colors hover:bg-slate-600"
                    @onclick="NewFolderInFolder">
                <i class="fas fa-folder-plus w-4 text-amber-400"></i>
                <span>新建文件夹</span>
            </button>
            <div class="my-1 h-px bg-slate-600"></div>
        }

        <button class="flex w-full items-center gap-2 px-3 py-2 text-left text-xs text-slate-200 transition-colors hover:bg-slate-600"
                @onclick="RenameContextFile">
            <i class="fas fa-edit w-4 text-green-400"></i>
            <span>重命名</span>
        </button>

        @if (!(_contextMenuFile?.IsFolder ?? false))
        {
            <button class="flex w-full items-center gap-2 px-3 py-2 text-left text-xs text-slate-200 transition-colors hover:bg-slate-600"
                    @onclick="DuplicateContextFile">
                <i class="fas fa-copy w-4 text-purple-400"></i>
                <span>复制</span>
            </button>
        }

        <div class="my-1 h-px bg-slate-600"></div>

        <button class="flex w-full items-center gap-2 px-3 py-2 text-left text-xs text-rose-400 transition-colors hover:bg-slate-600"
                @onclick="DeleteContextFile">
            <i class="fas fa-trash w-4"></i>
            <span>删除</span>
        </button>
    </div>
}

@code {
    [Parameter, EditorRequired]
    public List<ProjectFile> Files { get; set; } = new();

    [Parameter]
    public ProjectFile? SelectedFile { get; set; }

    [Parameter]
    public EventCallback<ProjectFile> OnFileSelected { get; set; }

    [Parameter]
    public EventCallback<ProjectFile> OnFileRenamed { get; set; }

    [Parameter]
    public EventCallback<ProjectFile> OnFileDeleted { get; set; }

    [Parameter]
    public EventCallback<(string folderPath, bool isFile)> OnNewFileInFolder { get; set; }

    private Dictionary<string, bool> _expandedFolders = new();
    private bool _showContextMenu = false;
    private ProjectFile? _contextMenuFile = null;
    private double _menuX = 0;
    private double _menuY = 0;

    protected override void OnInitialized()
    {
        // 点击页面其他地方关闭菜单
        JSRuntime.InvokeVoidAsync("eval", @"
            document.addEventListener('click', () => {
                DotNet.invokeMethodAsync('Zhg.FlowForge.App.Shared', 'CloseContextMenu');
            });
        ");
    }

    private RenderFragment RenderFiles(List<ProjectFile> files, int level) => builder =>
    {
        if (files == null || !files.Any()) return;

        var sortedFiles = files
            .OrderByDescending(f => f.IsFolder)
            .ThenBy(f => f.Name, StringComparer.OrdinalIgnoreCase)
            .ToList();

        int sequence = 0;
        foreach (var file in sortedFiles)
        {
            var isExpanded = _expandedFolders.GetValueOrDefault(file.Path, false);

            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", "file-item");

            // 文件项按钮
            builder.OpenElement(sequence++, "button");
            builder.AddAttribute(sequence++, "class", GetFileItemClass(file, level));
            builder.AddAttribute(sequence++, "style", $"padding-left: {(level * 16 + 8)}px");
            builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this,
                async () => await HandleFileClick(file)));
            builder.AddAttribute(sequence++, "oncontextmenu", EventCallback.Factory.Create<MouseEventArgs>(this,
                async (e) => await ShowContextMenu(file, e)));
            builder.AddAttribute(sequence++, "oncontextmenu:preventDefault", true);
            builder.AddAttribute(sequence++, "title", file.Path);

            // 展开/折叠图标
            if (file.IsFolder)
            {
                builder.OpenElement(sequence++, "i");
                builder.AddAttribute(sequence++, "class",
                    $"fas fa-chevron-right text-[0.625rem] text-slate-500 transition-transform duration-200 {(isExpanded ? "rotate-90" : "")}");
                builder.CloseElement();
            }
            else
            {
                builder.OpenElement(sequence++, "span");
                builder.AddAttribute(sequence++, "class", "inline-block w-3");
                builder.CloseElement();
            }

            // 文件/文件夹图标
            builder.OpenElement(sequence++, "i");
            builder.AddAttribute(sequence++, "class", GetFileIcon(file));
            builder.CloseElement();

            // 文件名
            builder.OpenElement(sequence++, "span");
            builder.AddAttribute(sequence++, "class", "flex-1 truncate text-left");
            builder.AddContent(sequence++, file.Name);
            builder.CloseElement();

            // 未保存标记
            if (file.IsDirty)
            {
                builder.OpenElement(sequence++, "i");
                builder.AddAttribute(sequence++, "class", "fas fa-circle text-[0.375rem] text-amber-500");
                builder.AddAttribute(sequence++, "title", "未保存");
                builder.CloseElement();
            }

            builder.CloseElement(); // button

            // 子文件
            if (file.IsFolder && isExpanded && file.SubFiles != null && file.SubFiles.Any())
            {
                builder.AddContent(sequence++, RenderFiles(file.SubFiles, level + 1));
            }

            builder.CloseElement(); // div
        }
    };

    private async Task HandleFileClick(ProjectFile file)
    {
        if (file.IsFolder)
        {
            var currentState = _expandedFolders.GetValueOrDefault(file.Path, false);
            _expandedFolders[file.Path] = !currentState;
            StateHasChanged();
        }
        else
        {
            await OnFileSelected.InvokeAsync(file);
        }
    }

    private async Task ShowContextMenu(ProjectFile file, MouseEventArgs e)
    {
        _contextMenuFile = file;
        _menuX = e.ClientX;
        _menuY = e.ClientY;
        _showContextMenu = true;
        StateHasChanged();

        await Task.CompletedTask;
    }

    [JSInvokable]
    public void CloseContextMenu()
    {
        _showContextMenu = false;
        _contextMenuFile = null;
        StateHasChanged();
    }

    private async Task NewFileInFolder()
    {
        _showContextMenu = false;
        if (_contextMenuFile != null)
        {
            await OnNewFileInFolder.InvokeAsync((_contextMenuFile.Path, true));
        }
    }

    private async Task NewFolderInFolder()
    {
        _showContextMenu = false;
        if (_contextMenuFile != null)
        {
            await OnNewFileInFolder.InvokeAsync((_contextMenuFile.Path, false));
        }
    }

    private async Task RenameContextFile()
    {
        _showContextMenu = false;
        if (_contextMenuFile != null)
        {
            await OnFileRenamed.InvokeAsync(_contextMenuFile);
        }
    }

    private async Task DuplicateContextFile()
    {
        _showContextMenu = false;
        if (_contextMenuFile != null && !_contextMenuFile.IsFolder)
        {
            // TODO: 实现文件复制
            await JSRuntime.InvokeVoidAsync("alert", "文件复制功能即将推出");
        }
    }

    private async Task DeleteContextFile()
    {
        _showContextMenu = false;
        if (_contextMenuFile != null)
        {
            await OnFileDeleted.InvokeAsync(_contextMenuFile);
        }
    }

    private string GetFileItemClass(ProjectFile file, int level)
    {
        var baseClass = "group flex items-center gap-2 py-1.5 rounded text-xs transition-colors cursor-pointer w-full text-left";
        var selectedClass = SelectedFile?.Path == file.Path
            ? "bg-slate-700 text-white"
            : "text-slate-300 hover:bg-slate-700/50";

        return $"{baseClass} {selectedClass}";
    }

    private string GetFileIcon(ProjectFile file)
    {
        if (file.IsFolder)
        {
            var isExpanded = _expandedFolders.GetValueOrDefault(file.Path, false);
            return isExpanded
                ? "fas fa-folder-open text-amber-400 text-xs"
                : "fas fa-folder text-amber-400 text-xs";
        }

        var ext = Path.GetExtension(file.Name ?? file.Path).ToLower();
        return ext switch
        {
            ".cs" => "fas fa-file-code text-blue-400 text-xs",
            ".razor" => "fas fa-file-code text-purple-400 text-xs",
            ".json" => "fas fa-file-code text-amber-400 text-xs",
            ".xml" => "fas fa-file-code text-rose-400 text-xs",
            ".html" => "fas fa-file-code text-orange-400 text-xs",
            ".csproj" => "fas fa-project-diagram text-green-400 text-xs",
            ".js" => "fas fa-file-code text-yellow-400 text-xs",
            ".css" => "fas fa-file-code text-blue-500 text-xs",
            ".md" => "fas fa-file-alt text-slate-400 text-xs",
            _ => "fas fa-file text-slate-400 text-xs"
        };
    }

    public void ExpandToFile(string filePath)
    {
        var parts = filePath.Split('/', StringSplitOptions.RemoveEmptyEntries);
        var currentPath = "";

        for (int i = 0; i < parts.Length - 1; i++)
        {
            currentPath += (i > 0 ? "/" : "") + parts[i];
            _expandedFolders[currentPath] = true;
        }

        StateHasChanged();
    }

    public void CollapseAll()
    {
        _expandedFolders.Clear();
        StateHasChanged();
    }

    public void ExpandAll()
    {
        ExpandAllRecursive(Files);
        StateHasChanged();
    }

    private void ExpandAllRecursive(List<ProjectFile> files)
    {
        foreach (var file in files.Where(f => f.IsFolder))
        {
            _expandedFolders[file.Path] = true;
            if (file.SubFiles != null && file.SubFiles.Any())
            {
                ExpandAllRecursive(file.SubFiles);
            }
        }
    }
}

<style>
    .file-tree {
        user-select: none;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
    }

    .file-item {
        position: relative;
    }
</style>