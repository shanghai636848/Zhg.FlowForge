<!-- 左侧工具面板 - 优化版 -->
<div class="@GetPanelClass()">
    <!-- 面板头部 -->
    <div class="flex h-10 items-center justify-between border-b border-violet-200/60 bg-gradient-to-r from-violet-50 via-purple-50 to-fuchsia-50 px-3 shadow-sm backdrop-blur-md">
        <span class="text-xs font-semibold tracking-wide text-violet-700">工具箱</span>
        <div class="flex items-center gap-1.5">
            <div class="flex h-6 w-6 items-center justify-center rounded-md bg-gradient-to-br from-violet-500 to-fuchsia-500 shadow-sm">
                <i class="fas fa-puzzle-piece text-[10px] text-white"></i>
            </div>
            <button @onclick="Close"
                    class="flex h-6 w-6 items-center justify-center rounded-md border border-violet-200 bg-white/90 text-violet-600 transition-all hover:scale-105 hover:border-violet-300 hover:bg-violet-50 active:scale-95 md:hidden">
                <i class="fas fa-times text-xs"></i>
            </button>
        </div>
    </div>

    <!-- 面板内容 - 添加滚动条 -->
    <div class="flex-1 overflow-y-auto p-2.5" style="max-height: calc(100vh - 6.5rem);">
        <div class="flex flex-col space-y-3">
            <!-- 流程控制 -->
            <ToolCategory Title="流程控制" Icon="fa-sitemap" Color="emerald">
                <ToolItem Type="bpmn:StartEvent" Icon="fa-play-circle" Label="开始" Color="emerald" />
                <ToolItem Type="bpmn:EndEvent" Icon="fa-stop-circle" Label="结束" Color="rose" />
                <ToolItem Type="bpmn:ExclusiveGateway" Icon="fa-code-branch" Label="排他" Color="amber" />
                <ToolItem Type="bpmn:ParallelGateway" Icon="fa-plus-circle" Label="并行" Color="blue" />
                <ToolItem Type="bpmn:InclusiveGateway" Icon="fa-circle" Label="包容" Color="indigo" />
                <ToolItem Type="bpmn:EventBasedGateway" Icon="fa-share-alt" Label="事件" Color="purple" />
            </ToolCategory>

            <!-- 任务类型 -->
            <ToolCategory Title="任务类型" Icon="fa-tasks" Color="sky">
                <ToolItem Type="bpmn:Task" Icon="fa-square" Label="任务" Color="slate" />
                <ToolItem Type="bpmn:UserTask" Icon="fa-user" Label="用户" Color="blue" />
                <ToolItem Type="bpmn:ServiceTask" Icon="fa-cogs" Label="服务" Color="violet" />
                <ToolItem Type="bpmn:ManualTask" Icon="fa-hand-paper" Label="手动" Color="orange" />
                <ToolItem Type="bpmn:BusinessRuleTask" Icon="fa-gavel" Label="规则" Color="teal" />
                <ToolItem Type="bpmn:ScriptTask" Icon="fa-code" Label="脚本" Color="fuchsia" />
            </ToolCategory>

            <!-- 其他元素 -->
            <ToolCategory Title="其他元素" Icon="fa-shapes" Color="cyan">
                <ToolItem Type="bpmn:SubProcess" Icon="fa-th-large" Label="子流程" Color="indigo" />
                <ToolItem Type="bpmn:CallActivity" Icon="fa-phone-alt" Label="调用" Color="pink" />
                <ToolItem Type="bpmn:DataObjectReference" Icon="fa-file-alt" Label="数据" Color="yellow" />
                <ToolItem Type="bpmn:DataStoreReference" Icon="fa-database" Label="存储" Color="green" />
            </ToolCategory>
        </div>
    </div>
</div>

<!-- 模态遮罩 - 仅手机端显示 -->
@if (IsOpen)
{
    <div class="fixed inset-0 z-30 bg-black/30 backdrop-blur-sm transition-opacity md:hidden"
         @onclick="Close"></div>
}

<style>
    /* 自定义滚动条样式 */
    .overflow-y-auto::-webkit-scrollbar {
        width: 5px;
    }

    .overflow-y-auto::-webkit-scrollbar-track {
        background: #f1f5f9;
        border-radius: 2.5px;
    }

    .overflow-y-auto::-webkit-scrollbar-thumb {
        background: linear-gradient(to bottom, #c7d2fe, #a5b4fc);
        border-radius: 2.5px;
    }

        .overflow-y-auto::-webkit-scrollbar-thumb:hover {
            background: linear-gradient(to bottom, #a5b4fc, #818cf8);
        }

    ::-webkit-scrollbar-thumb {
        background: linear-gradient(to bottom, #c7d2fe, #a5b4fc);
        border-radius: 3px;
    }

    .overflow-y-auto::-webkit-scrollbar-thumb:hover {
        background: linear-gradient(to bottom, #a5b4fc, #818cf8);
    }
</style>

@code {
    [Parameter] public bool IsOpen { get; set; } = true;
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private async Task Close()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
        await OnClose.InvokeAsync();
    }

    private string GetPanelClass()
    {
        var baseClass = "flex flex-col border-r border-violet-200/60 bg-white/95 shadow-xl backdrop-blur-sm transition-all duration-300 ease-in-out";

        if (IsOpen)
        {
            return $"{baseClass} fixed left-0 top-14 bottom-0 z-40 w-52 translate-x-0 md:relative md:top-0 md:w-52";
        }
        else
        {
            return $"{baseClass} fixed left-0 top-14 bottom-0 z-40 w-52 -translate-x-full md:w-0 md:overflow-hidden";
        }
    }
}