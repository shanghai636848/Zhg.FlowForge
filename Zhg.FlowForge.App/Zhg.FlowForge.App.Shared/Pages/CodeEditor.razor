@page "/editor/{ProjectId}"
@using System.Threading.Tasks
@using System.IO
@using Zhg.FlowForge.App.Shared.Components.Buttons
@using Zhg.FlowForge.App.Shared.Components.Editor
@using Zhg.FlowForge.App.Shared.Models
@using Zhg.FlowForge.App.Shared.Services
@layout EditorLayout
@inject IJSRuntime JS
@inject IProjectService ProjectService
@inject ICodeAnalysisService AnalysisService
@inject IToastService ToastService
@inject NavigationManager Navigation
@inject IThemeService ThemeService
@implements IDisposable

<PageTitle>代码编辑器 - FlowForge</PageTitle>

<div class="flex w-full flex-1 bg-slate-900">
    <!-- 左侧文件树 -->
    <div class="flex w-64 flex-col border-r border-slate-700 bg-slate-800">
        <!-- 文件树头部 -->
        <div class="flex h-12 items-center justify-between border-b border-slate-700 px-3">
            <h3 class="text-xs font-semibold text-slate-200">项目文件</h3>
            <div class="flex items-center gap-1">
                <IconButton Icon="fas fa-folder-plus"
                            Size="xs"
                            Variant="ghost-light"
                            Title="新建文件夹"
                            OnClick="NewFolder" />
                <IconButton Icon="fas fa-file-plus"
                            Size="xs"
                            Variant="ghost-light"
                            Title="新建文件"
                            OnClick="NewFile" />
                <IconButton Icon="fas fa-sync"
                            Size="xs"
                            Variant="ghost-light"
                            Title="刷新"
                            OnClick="RefreshFiles" />
            </div>
        </div>

        <!-- 文件树 -->
        <div class="scrollable flex-1 overflow-y-auto p-2">
            <FileTree Files="@ProjectFiles"
                      SelectedFile="@CurrentFile"
                      OnFileSelected="OpenFile"
                      OnFileRenamed="RenameFile"
                      OnFileDeleted="DeleteFile" />
        </div>

        <!-- 文件统计 -->
        <div class="border-t border-slate-700 p-3 text-xs text-slate-400">
            <div class="flex items-center justify-between">
                <span>@ProjectFiles.Count 个文件</span>
                <span>@TotalLines 行</span>
            </div>
        </div>
    </div>

    <!-- 中央编辑区 -->
    <div class="flex flex-1 flex-col">
        <!-- 编辑器工具栏 -->
        <div class="flex h-12 items-center justify-between border-b border-slate-700 bg-slate-800 px-4">
            <!-- 左侧侧：文件标签 -->
            <div class="scrollable flex flex-1 items-center gap-1 overflow-x-auto">
                @foreach (var file in OpenedFiles)
                {
                    <div class="group flex h-8 items-center gap-2 rounded-t-lg px-3 transition-colors
                              @(CurrentFile?.Path == file.Path ?
                                                  "bg-slate-900 text-white" :
                                                  "bg-slate-700/50 text-slate-300 hover:bg-slate-700")"
                         @onclick="() => SwitchToFile(file)">
                        <i class="@GetFileIcon(file.Path) text-xs"></i>
                        <span class="text-xs font-medium">@Path.GetFileName(file.Path)</span>
                        @if (file.IsDirty)
                        {
                            <i class="fas fa-circle text-[0.375rem] text-amber-500"></i>
                        }
                        <button class="flex h-4 w-4 items-center justify-center rounded opacity-0 transition-all
                                      group-hover:opacity-100 hover:bg-slate-600"
                                @onclick:stopPropagation="true"
                                @onclick="() => CloseFile(file)">
                            <i class="fas fa-times text-xs"></i>
                        </button>
                    </div>
                }
            </div>

            <!-- 右侧：编辑器工具 -->
            <div class="flex items-center gap-2">
                <!-- 保存 -->
                <Button Variant="primary"
                        Size="sm"
                        Icon="fas fa-save"
                        Disabled="@(!HasUnsavedChanges)"
                        OnClick="SaveAll">
                    保存全部
                </Button>

                <!-- 格式化 -->
                <IconButton Icon="fas fa-align-left"
                            Size="sm"
                            Variant="ghost-light"
                            Title="格式化代码 (Shift+Alt+F)"
                            OnClick="FormatDocument"
                            Disabled="CurrentFile == null" />

                <!-- 查找替换 -->
                <IconButton Icon="fas fa-search"
                            Size="sm"
                            Variant="ghost-light"
                            Title="查找 (Ctrl+F)"
                            OnClick="ShowFindDialog"
                            Disabled="CurrentFile == null" />

                <!-- 设置 -->
                <IconButton Icon="fas fa-cog"
                            Size="sm"
                            Variant="ghost-light"
                            Title="编辑器设置"
                            OnClick="ShowSettings" />

                <div class="mx-1 h-6 w-px bg-slate-700"></div>

                <!-- 编译 -->
                <Button Variant="success"
                        Size="sm"
                        Icon="fas fa-hammer"
                        OnClick="GoToCompile">
                    编译测试
                </Button>
            </div>
        </div>

        <!-- Monaco 编辑器容器 -->
        <div id="monaco-container" class="relative flex-1">
            @if (CurrentFile == null)
            {
                <!-- 欢迎屏幕 -->
                <div class="absolute inset-0 flex items-center justify-center">
                    <div class="text-center">
                        <div class="mx-auto mb-6 flex h-24 w-24 items-center justify-center rounded-2xl bg-slate-800">
                            <i class="fas fa-code text-4xl text-slate-600"></i>
                        </div>
                        <h3 class="mb-2 text-lg font-semibold text-slate-200">
                            FlowForge 代码编辑器
                        </h3>
                        <p class="mb-6 text-sm text-slate-400">
                            从左侧选择文件开始编辑
                        </p>
                        <div class="flex items-center justify-center gap-3">
                            <Button Variant="primary"
                                    Size="sm"
                                    Icon="fas fa-file-plus"
                                    OnClick="NewFile">
                                新建文件
                            </Button>
                            <Button Variant="secondary"
                                    Size="sm"
                                    Icon="fas fa-folder-open"
                                    OnClick="@(() => Navigation.NavigateTo("/"))">
                                打开项目
                            </Button>
                        </div>

                        <!-- 快捷键提示 -->
                        <div class="mt-8 inline-block text-left">
                            <div class="mb-3 text-xs font-semibold text-slate-400">快捷键</div>
                            <div class="space-y-2 text-xs text-slate-500">
                                <div class="flex items-center gap-4">
                                    <kbd class="kbd-dark">Ctrl+S</kbd>
                                    <span>保存文件</span>
                                </div>
                                <div class="flex items-center gap-4">
                                    <kbd class="kbd-dark">Ctrl+F</kbd>
                                    <span>查找</span>
                                </div>
                                <div class="flex items-center gap-4">
                                    <kbd class="kbd-dark">Shift+Alt+F</kbd>
                                    <span>格式化</span>
                                </div>
                                <div class="flex items-center gap-4">
                                    <kbd class="kbd-dark">Ctrl+/</kbd>
                                    <span>注释切换</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- 底部状态栏 -->
        <div class="flex h-6 items-center justify-between border-t border-slate-700 bg-slate-800 px-4 text-xs text-slate-400">
            <div class="flex items-center gap-4">
                @if (CurrentFile != null)
                {
                    <span>行 @_EditorState.Line, 列 @_EditorState.Column</span>
                    <span>@GetLanguageName(CurrentFile.Path)</span>
                    <span>UTF-8</span>
                    <span>LF</span>
                }
            </div>

            <div class="flex items-center gap-4">
                @if (_AnalysisState.IsAnalyzing)
                {
                    <span class="flex items-center gap-2">
                        <i class="fas fa-spinner fa-spin text-xs"></i>
                        <span>分析中...</span>
                    </span>
                }
                else if (_AnalysisState.HasErrors)
                {
                    <button class="flex items-center gap-2 hover:text-rose-400"
                            @onclick="ShowProblemsPanel">
                        <i class="fas fa-times-circle text-rose-500"></i>
                        <span>@_AnalysisState.ErrorCount 个错误</span>
                    </button>
                }
                @if (_AnalysisState.HasWarnings)
                {
                    <button class="flex items-center gap-2 hover:text-amber-400"
                            @onclick="ShowProblemsPanel">
                        <i class="fas fa-exclamation-triangle text-amber-500"></i>
                        <span>@_AnalysisState.WarningCount 个警告</span>
                    </button>
                }
                <span>@_EditorSettings.Theme</span>
                <span>空格: @_EditorSettings.TabSize</span>
            </div>
        </div>
    </div>

    <!-- 右侧面板 -->
    <div class="flex w-80 flex-col border-l border-slate-700 bg-slate-800">
        <!-- 面板标签 -->
        <div class="flex h-12 items-center gap-2 border-b border-slate-700 px-3">
            <button class="h-8 flex-1 rounded text-xs font-medium transition-colors
                      @(ActivePanel == "outline" ?
                                        "bg-slate-700 text-white" :
                                        "text-slate-400 hover:text-white hover:bg-slate-700/50")"
                    @onclick="@(() => ActivePanel = "outline")">
                大纲
            </button>
            <button class="h-8 flex-1 rounded text-xs font-medium transition-colors
                      @(ActivePanel == "problems" ?
                                        "bg-slate-700 text-white" :
                                        "text-slate-400 hover:text-white hover:bg-slate-700/50")"
                    @onclick="@(() => ActivePanel = "problems")">
                问题
            </button>
            <button class="h-8 flex-1 rounded text-xs font-medium transition-colors
                      @(ActivePanel == "search" ?
                                        "bg-slate-700 text-white" :
                                        "text-slate-400 hover:text-white hover:bg-slate-700/50")"
                    @onclick="@(() => ActivePanel = "search")">
                搜索
            </button>
        </div>

        <!-- 面板内容 -->
        <div class="scrollable flex-1 overflow-y-auto p-3">
            @switch (ActivePanel)
            {
                case "outline":
                    <CodeOutlinePanel Symbols="@CodeSymbols" OnSymbolClick="JumpToSymbol" />
                    break;
                case "problems":
                    <ProblemsPanel Diagnostics="@Diagnostics" OnDiagnosticClick="JumpToDiagnostic" />
                    break;
                case "search":
                    <SearchInFilesPanel OnSearchPerformed="PerformSearch" />
                    break;
            }
        </div>
    </div>
</div>
<style>
    .kbd-dark {
        @@apply inline-flex items-center justify-center px-2 py-1 rounded bg-slate-700 border border-slate-600 text-slate-300 font-mono text-xs;
    }
</style>


@code {
    class EditorState
    {
        public int Line { get; set; } = 1;
        public int Column { get; set; } = 1;
    }

    class AnalysisState
    {
        public bool IsAnalyzing { get; set; }
        public bool HasErrors { get; set; }
        public bool HasWarnings { get; set; }
        public int ErrorCount { get; set; }
        public int WarningCount { get; set; }
    }

    class EditorSettings
    {
        public string Theme { get; set; } = "vs-dark";
        public int TabSize { get; set; } = 4;
    }

    [Parameter] public string ProjectId { get; set; } = "";
    private List<ProjectFile> ProjectFiles = new();
    private List<ProjectFile> OpenedFiles = new();
    private ProjectFile? CurrentFile = null;
    private string ActivePanel = "outline";
    private bool HasUnsavedChanges => OpenedFiles.Any(f => f.IsDirty);
    private int TotalLines = 0;

    private EditorState _EditorState = new();
    private AnalysisState _AnalysisState = new();
    private EditorSettings _EditorSettings = new() { Theme = "vs-dark", TabSize = 4 };
    private List<CodeSymbol> CodeSymbols = new();
    private List<Diagnostic> Diagnostics = new();

    private IJSObjectReference? _jsModule;
    private DotNetObjectReference<CodeEditor>? _dotnetHelper;
    private bool _isDisposed;
    private Dictionary<string, string> _fileContents = new Dictionary<string, string>(); // 存储文件内容的字典

    protected override async Task OnInitializedAsync()
    {
        // 加载主题设置
        var theme = await ThemeService.GetCurrentThemeAsync();
        if (!string.IsNullOrEmpty(theme))
        {
            _EditorSettings.Theme = theme;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeJs();
            await InitializeMonaco();
            await LoadProject();
        }
    }

    private async Task InitializeJs()
    {
        if (_jsModule is not null) return;

        try
        {
            _jsModule = await JS.InvokeAsync<IJSObjectReference>(
                "import", "./_content/Zhg.FlowForge.App.Shared/js/monaco.js");
            _dotnetHelper = DotNetObjectReference.Create(this);
        }
        catch (JSException ex)
        {
            Console.WriteLine($"Monaco初始化失败: {ex.Message}");
            ToastService.Error("编辑器初始化失败，请刷新页面重试");
        }
    }

    private async Task InitializeMonaco()
    {
        await JS.InvokeVoidAsync("initMonacoEditor", new
        {
            containerId = "monaco-container",
            theme = _EditorSettings.Theme,
            fontSize = 14,
            tabSize = _EditorSettings.TabSize,
            minimap = new { enabled = true },
            automaticLayout = true,
            scrollBeyondLastLine = false
        });

        // 注册事件回调
        await JS.InvokeVoidAsync("registerMonacoCallbacks",
            DotNetObjectReference.Create(this));

        // 注册键盘快捷键
        await RegisterKeyboardShortcuts();
    }

    private async Task RegisterKeyboardShortcuts()
    {
        // Ctrl+S 保存当前文件
        await JS.InvokeVoidAsync("registerMonacoKeybinding", 
            "ctrl+s", "saveCurrentFile");
        
        // Ctrl+F 查找
        await JS.InvokeVoidAsync("registerMonacoKeybinding", 
            "ctrl+f", "showFind");
        
        // Shift+Alt+F 格式化
        await JS.InvokeVoidAsync("registerMonacoKeybinding", 
            "shift+alt+f", "formatDocument");
    }

    private async Task LoadProject()
    {
        try
        {
            ProjectFiles = await ProjectService.GetProjectFilesAsync(ProjectId);
            TotalLines = ProjectFiles.Sum(f => f.LineCount);
            _fileContents.Clear(); // 清空文件内容缓存
        }
        catch (Exception ex)
        {
            Console.WriteLine($"加载项目文件失败: {ex.Message}");
            ToastService.Error("加载项目文件失败");
        }
        StateHasChanged();
    }

    private async Task OpenFile(ProjectFile file)
    {
        if (file == null) return;

        try
        {
            // 如果文件已打开，直接切换
            if (!OpenedFiles.Contains(file))
            {
                OpenedFiles.Add(file);
            }

            CurrentFile = file;
            var content = await ProjectService.GetFileContentAsync(ProjectId, file.Path);
            _fileContents[file.Path] = content; // 保存到字典中

            await JS.InvokeVoidAsync("setMonacoContent", content, GetLanguage(file.Path));
            await AnalyzeCurrentFile();
            await UpdateCodeOutline();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"打开文件失败: {ex.Message}");
            ToastService.Error($"打开文件失败: {ex.Message}");
        }
    }

    private async Task SwitchToFile(ProjectFile file)
    {
        if (file == null || file == CurrentFile) return;

        // 保存当前文件的内容
        if (CurrentFile != null)
        {
            var currentContent = await JS.InvokeAsync<string>("getMonacoContent");
            _fileContents[CurrentFile.Path] = currentContent; // 保存到字典中
        }

        // 切换到新文件
        CurrentFile = file;
        var content = _fileContents.TryGetValue(file.Path, out var existingContent) ? existingContent : "";
        await JS.InvokeVoidAsync("setMonacoContent", content, GetLanguage(file.Path));
        await AnalyzeCurrentFile();
        await UpdateCodeOutline();
    }

    private async Task CloseFile(ProjectFile file)
    {
        if (file == null) return;

        // 如果文件有未保存的更改，询问用户
        if (file.IsDirty)
        {
            var confirmSave = await JS.InvokeAsync<bool>("confirm", 
                $"文件 '{Path.GetFileName(file.Path)}' 有未保存的更改，是否保存?");
            
            if (confirmSave)
            {
                var content = await JS.InvokeAsync<string>("getMonacoContent");
                await ProjectService.SaveFileAsync(ProjectId, file.Path, content);
                file.IsDirty = false;
                _fileContents[file.Path] = content; // 更新缓存
            }
        }

        OpenedFiles.Remove(file);
        
        if (CurrentFile == file)
        {
            if (OpenedFiles.Any())
            {
                await SwitchToFile(OpenedFiles.Last());
            }
            else
            {
                CurrentFile = null;
                await JS.InvokeVoidAsync("clearMonacoContent");
                CodeSymbols.Clear();
                Diagnostics.Clear();
            }
        }
        
        StateHasChanged();
    }

    private async Task SaveAll()
    {
        try
        {
            foreach (var file in OpenedFiles.Where(f => f.IsDirty).ToList())
            {
                var content = await JS.InvokeAsync<string>("getMonacoContent");
                await ProjectService.SaveFileAsync(ProjectId, file.Path, content);
                file.IsDirty = false;
                _fileContents[file.Path] = content; // 更新缓存
            }
            ToastService.Success("所有文件已保存");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"保存文件失败: {ex.Message}");
            ToastService.Error($"保存失败: {ex.Message}");
        }
    }

    private async Task FormatDocument()
    {
        if (CurrentFile == null) return;

        try
        {
            await JS.InvokeVoidAsync("formatMonacoDocument");
            var formattedContent = await JS.InvokeAsync<string>("getMonacoContent");
            
            if (formattedContent != _fileContents.GetValueOrDefault(CurrentFile.Path))
            {
                _fileContents[CurrentFile.Path] = formattedContent; // 更新缓存
                CurrentFile.IsDirty = true;
                await AnalyzeCurrentFile();
            }
            
            ToastService.Success("代码已格式化");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"格式化失败: {ex.Message}");
            ToastService.Error($"格式化失败: {ex.Message}");
        }
    }

    private async Task ShowFindDialog()
    {
        if (CurrentFile != null)
        {
            await JS.InvokeVoidAsync("showMonacoFind");
        }
    }

    private async Task ShowSettings()
    {
        // 切换主题
        var newTheme = _EditorSettings.Theme == "vs-dark" ? "vs" : "vs-dark";
        _EditorSettings.Theme = newTheme;
        await JS.InvokeVoidAsync("setMonacoTheme", newTheme);
        
        // 简化版：如果IThemeService没有SaveThemePreferenceAsync方法，直接保存到本地存储
        await JS.InvokeVoidAsync("localStorage.setItem", "editor-theme", newTheme);
        
        StateHasChanged();
    }

    private void GoToCompile()
    {
        Navigation.NavigateTo($"/compile/{ProjectId}");
    }

    private async Task AnalyzeCurrentFile()
    {
        if (CurrentFile == null) return;

        _AnalysisState.IsAnalyzing = true;
        StateHasChanged();

        try
        {
            var content = await JS.InvokeAsync<string>("getMonacoContent");
            Diagnostics = await AnalysisService.AnalyzeCodeAsync(content, GetLanguage(CurrentFile.Path));

            _AnalysisState.ErrorCount = Diagnostics.Count(d => d.Severity == "Error");
            _AnalysisState.WarningCount = Diagnostics.Count(d => d.Severity == "Warning");
            _AnalysisState.HasErrors = _AnalysisState.ErrorCount > 0;
            _AnalysisState.HasWarnings = _AnalysisState.WarningCount > 0;
            
            // 在编辑器中显示诊断信息
            await JS.InvokeVoidAsync("setMonacoDiagnostics", Diagnostics);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"代码分析失败: {ex.Message}");
            ToastService.Error("代码分析失败");
        }
        finally
        {
            _AnalysisState.IsAnalyzing = false;
            StateHasChanged();
        }
    }

    private async Task UpdateCodeOutline()
    {
        if (CurrentFile == null) return;

        try
        {
            var content = await JS.InvokeAsync<string>("getMonacoContent");
            CodeSymbols = await AnalysisService.GetCodeOutlineAsync(content, GetLanguage(CurrentFile.Path));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"获取代码大纲失败: {ex.Message}");
            CodeSymbols.Clear();
        }
        StateHasChanged();
    }

    [JSInvokable]
    public async Task OnContentChanged()
    {
        if (CurrentFile != null)
        {
            var newContent = await JS.InvokeAsync<string>("getMonacoContent");
            if (newContent != _fileContents.GetValueOrDefault(CurrentFile.Path))
            {
                CurrentFile.IsDirty = true;
                _fileContents[CurrentFile.Path] = newContent; // 更新缓存
                
                // 节流处理，避免频繁分析
                await Task.Delay(500);
                if (CurrentFile.IsDirty)
                {
                    await AnalyzeCurrentFile();
                    await UpdateCodeOutline();
                }
            }
        }
    }

    [JSInvokable]
    public void OnCursorPositionChanged(int line, int column)
    {
        _EditorState.Line = line;
        _EditorState.Column = column;
        StateHasChanged();
    }

    [JSInvokable]
    public async Task HandleKeybinding(string command)
    {
        switch (command)
        {
            case "saveCurrentFile":
                if (CurrentFile != null && CurrentFile.IsDirty)
                {
                    var content = await JS.InvokeAsync<string>("getMonacoContent");
                    await ProjectService.SaveFileAsync(ProjectId, CurrentFile.Path, content);
                    CurrentFile.IsDirty = false;
                    _fileContents[CurrentFile.Path] = content; // 更新缓存
                    ToastService.Success($"已保存: {Path.GetFileName(CurrentFile.Path)}");
                }
                break;
            case "showFind":
                await ShowFindDialog();
                break;
            case "formatDocument":
                await FormatDocument();
                break;
        }
    }

    private async Task JumpToSymbol(CodeSymbol symbol)
    {
        await JS.InvokeVoidAsync("jumpToPosition", symbol.Line, symbol.Column);
    }

    private async Task JumpToDiagnostic(Diagnostic diagnostic)
    {
        await JS.InvokeVoidAsync("jumpToPosition", diagnostic.Line, diagnostic.Column);
    }

    private void ShowProblemsPanel()
    {
        ActivePanel = "problems";
    }

    private async Task NewFile()
    {
        var fileName = await JS.InvokeAsync<string>("prompt", "请输入文件名", "newfile.cs");
        if (!string.IsNullOrEmpty(fileName))
        {
            try
            {
                // 假设CreateFileAsync方法存在，如果不存在需要调整
                var newFile = await ProjectService.CreateFileAsync(ProjectId, fileName, "");
                ProjectFiles.Add(newFile);
                _fileContents[newFile.Path] = ""; // 初始化空内容
                await OpenFile(newFile);
                ToastService.Success($"已创建文件: {fileName}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"创建文件失败: {ex.Message}");
                ToastService.Error($"创建文件失败: {ex.Message}");
            }
        }
    }

    private async Task NewFolder()
    {
        var folderName = await JS.InvokeAsync<string>("prompt", "请输入文件夹名", "newfolder");
        if (!string.IsNullOrEmpty(folderName))
        {
            try
            {
                // 简化版：如果IProjectService没有CreateFolderAsync，这里可以调用等效方法
                // 或者如果确实没有该方法，可以移除文件夹创建功能
                //await ProjectService.CreateDirectoryAsync(ProjectId, folderName); // 假设的替代方法
                await RefreshFiles();
                ToastService.Success($"已创建文件夹: {folderName}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"创建文件夹失败: {ex.Message}");
                ToastService.Error($"创建文件夹失败: {ex.Message}");
            }
        }
    }

    private async Task RefreshFiles()
    {
        await LoadProject();
        ToastService.Info("文件列表已刷新");
    }

    private async Task RenameFile(ProjectFile file)
    {
        if (file == null) return;
        
        var newName = await JS.InvokeAsync<string>("prompt", "请输入新名称", Path.GetFileName(file.Path));
        if (!string.IsNullOrEmpty(newName) && newName != Path.GetFileName(file.Path))
        {
            try
            {
                var newPath = Path.Combine(Path.GetDirectoryName(file.Path) ?? "", newName);
                await ProjectService.RenameFileAsync(ProjectId, file.Path, newPath);
                
                // 更新文件内容缓存
                if (_fileContents.ContainsKey(file.Path))
                {
                    var content = _fileContents[file.Path];
                    _fileContents.Remove(file.Path);
                    _fileContents[newPath] = content;
                }
                
                // 更新当前打开的文件
                if (CurrentFile == file)
                {
                    CurrentFile.Path = newPath;
                }
                
                await RefreshFiles();
                ToastService.Success("文件已重命名");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"重命名文件失败: {ex.Message}");
                ToastService.Error($"重命名失败: {ex.Message}");
            }
        }
    }

    private async Task DeleteFile(ProjectFile file)
    {
        if (file == null) return;
        
        var confirm = await JS.InvokeAsync<bool>("confirm", $"确定要删除文件 '{Path.GetFileName(file.Path)}' 吗?");
        if (confirm)
        {
            try
            {
                await ProjectService.DeleteFileAsync(ProjectId, file.Path);
                
                // 从缓存中移除
                if (_fileContents.ContainsKey(file.Path))
                {
                    _fileContents.Remove(file.Path);
                }
                
                // 从打开的文件列表中移除
                if (OpenedFiles.Contains(file))
                {
                    await CloseFile(file);
                }
                
                await RefreshFiles();
                ToastService.Success("文件已删除");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"删除文件失败: {ex.Message}");
                ToastService.Error($"删除失败: {ex.Message}");
            }
        }
    }

    private async Task PerformSearch(string query)
    {
        if (string.IsNullOrEmpty(query)) return;
        
        try
        {
            // 实现文件内搜索逻辑
            await JS.InvokeVoidAsync("searchInMonaco", query);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"搜索失败: {ex.Message}");
            ToastService.Error("搜索失败");
        }
    }

    private string GetFileIcon(string path)
    {
        var ext = Path.GetExtension(path).ToLower();
        return ext switch
        {
            ".cs" => "fas fa-file-code text-blue-400",
            ".razor" => "fas fa-file-code text-purple-400",
            ".json" => "fas fa-brackets-curly text-amber-400",
            ".xml" => "fas fa-code text-rose-400",
            ".csproj" => "fas fa-project-diagram text-green-400",
            _ => "fas fa-file text-slate-400"
        };
    }

    private string GetLanguage(string path)
    {
        var ext = Path.GetExtension(path).ToLower();
        return ext switch
        {
            ".cs" => "csharp",
            ".razor" => "razor",
            ".json" => "json",
            ".xml" => "xml",
            ".html" => "html",
            ".js" => "javascript",
            _ => "plaintext"
        };
    }

    private string GetLanguageName(string path)
    {
        var ext = Path.GetExtension(path).ToLower();
        return ext switch
        {
            ".cs" => "C#",
            ".razor" => "Razor",
            ".json" => "JSON",
            ".xml" => "XML",
            ".html" => "HTML",
            ".js" => "JavaScript",
            _ => "Plain Text"
        };
    }

    public async ValueTask DisposeAsync()
    {
        Dispose();
        await Task.CompletedTask;
    }

    public void Dispose()
    {
        if (_isDisposed) return;
        
        _dotnetHelper?.Dispose();
        if (_jsModule != null)
        {
            _ = _jsModule.DisposeAsync();
        }
        
        _isDisposed = true;
    }
}