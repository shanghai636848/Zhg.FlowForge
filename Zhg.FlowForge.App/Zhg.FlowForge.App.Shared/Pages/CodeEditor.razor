@page "/editor/{ProjectId}"
@using System.Threading
@using System.IO
@using Zhg.FlowForge.App.Shared.Components.Buttons
@using Zhg.FlowForge.App.Shared.Components.Editor
@using Zhg.FlowForge.App.Shared.Components.Feedback
@using Zhg.FlowForge.App.Shared.Components.Form
@using Zhg.FlowForge.App.Shared.Components.Layout
@using Zhg.FlowForge.App.Shared.Models
@using Zhg.FlowForge.App.Shared.Services
@layout EditorLayout
@inject IJSRuntime JS
@inject IProjectService ProjectService
@inject ICodeAnalysisService AnalysisService
@inject IToastService ToastService
@inject NavigationManager Navigation
@inject IThemeService ThemeService
@implements IAsyncDisposable

<PageTitle>代码编辑器 - FlowForge</PageTitle>

<div class="flex h-screen w-full flex-1 bg-slate-900">
	<!-- 左侧文件树 -->
	<div class="flex w-64 flex-col border-r border-slate-700 bg-slate-800">
		<!-- 文件树头部 -->
		<div class="flex h-12 items-center justify-between border-b border-slate-700 px-3">
			<h3 class="text-xs font-semibold text-slate-200">项目文件</h3>
			<div class="flex items-center gap-1">
				<IconButton Icon="fas fa-folder-plus"
							Size="xs"
							Variant="ghost-light"
							Title="新建文件夹"
							OnClick="NewFolder" />
				<IconButton Icon="fas fa-file-plus"
							Size="xs"
							Variant="ghost-light"
							Title="新建文件 (Ctrl+N)"
							OnClick="NewFile" />
				<IconButton Icon="fas fa-sync"
							Size="xs"
							Variant="ghost-light"
							Title="刷新"
							OnClick="RefreshFiles" />
			</div>
		</div>

		<!-- 文件树 -->
		<div class="scrollable flex-1 overflow-y-auto p-2">
			@if (_isLoadingFiles)
			{
				<div class="flex items-center justify-center py-8">
					<i class="fas fa-spinner fa-spin text-slate-400"></i>
				</div>
			}
			else if (ProjectFiles.Any())
			{
				<FileTree Files="@ProjectFiles"
						  SelectedFile="@CurrentFile"
						  OnFileSelected="OpenFile"
						  OnFileRenamed="RenameFile"
						  OnFileDeleted="DeleteFile"
						  OnNewFileInFolder="HandleNewFileInFolder"
						  @ref="_fileTreeRef" />
			}
			else
			{
				<div class="flex flex-col items-center justify-center py-8 text-slate-500">
					<i class="fas fa-folder-open mb-2 text-2xl"></i>
					<p class="text-xs">没有文件</p>
					<Button Variant="primary"
							Size="sm"
							Icon="fas fa-file-plus"
							OnClick="NewFile"
							>
						创建第一个文件
					</Button>
				</div>
			}
		</div>

		<!-- 文件统计 -->
		<div class="border-t border-slate-700 p-3 text-xs text-slate-400">
			<div class="flex items-center justify-between">
				<span>@GetTotalFileCount() 个文件</span>
				<span>@TotalLines 行</span>
			</div>
			@if (_currentProject != null && _currentProject.IsSavedToLocal)
			{
				<div class="mt-2 flex items-center gap-1 text-emerald-500">
					<i class="fas fa-check-circle text-xs"></i>
					<span>已同步到本地</span>
				</div>
			}
		</div>
	</div>

	<!-- 中央编辑区 -->
	<div class="flex flex-1 flex-col">
		<!-- 编辑器工具栏 -->
		<div class="flex h-12 items-center justify-between border-b border-slate-700 bg-slate-800 px-4">
			<!-- 左侧：文件标签 -->
			<div class="scrollable flex flex-1 items-center gap-1 overflow-x-auto">
				@if (OpenedFiles.Any())
				{
					@foreach (var file in OpenedFiles)
					{
						<div class="group relative flex h-8 items-center gap-2 rounded-t-lg px-3 transition-all
				                                  @(CurrentFile?.Path == file.Path ?
															   		 "bg-slate-900 text-white" :
															 		 "bg-slate-700/50 text-slate-300 hover:bg-slate-700")
				                                  @(file.IsDirty ? "border-t-2 border-amber-500" : "")"
							 @onclick="() => SwitchToFile(file)">
							<i class="@GetFileIcon(file.Path) text-xs"></i>
							<span class="max-w-32 truncate text-xs font-medium" title="@file.Path">
								@Path.GetFileName(file.Path)
							</span>
							@if (file.IsDirty)
							{
								<i class="fas fa-circle text-[0.375rem] text-amber-500" title="未保存"></i>
							}
							<button class="flex h-4 w-4 items-center justify-center rounded opacity-0 transition-all
				                                          group-hover:opacity-100 hover:bg-slate-600"
									@onclick:stopPropagation="true"
									@onclick="() => CloseFile(file)"
									title="关闭 (Ctrl+W)">
								<i class="fas fa-times text-xs"></i>
							</button>
						</div>
					}
				}
				else
				{
					<div class="text-xs text-slate-500">没有打开的文件</div>
				}
			</div>

			<!-- 右侧：编辑器工具 -->
			<div class="flex items-center gap-2">
				<!-- 保存 -->
				<Button Variant="primary"
						Size="sm"
						Icon="fas fa-save"
						Disabled="!HasUnsavedChanges"
						OnClick="SaveAll"
						Title="保存全部 (Ctrl+S)">
					保存 @(HasUnsavedChanges ? $"({OpenedFiles.Count(f => f.IsDirty)})" : "")
				</Button>

				<!-- 格式化 -->
				<IconButton Icon="fas fa-align-left"
							Size="sm"
							Variant="ghost-light"
							Title="格式化代码 (Shift+Alt+F)"
							OnClick="FormatDocument"
							Disabled="CurrentFile == null" />

				<!-- 查找替换 -->
				<IconButton Icon="fas fa-search"
							Size="sm"
							Variant="ghost-light"
							Title="查找 (Ctrl+F)"
							OnClick="ShowFindDialog"
							Disabled="CurrentFile == null" />

				<!-- 撤销/重做 -->
				<IconButton Icon="fas fa-undo"
							Size="sm"
							Variant="ghost-light"
							Title="撤销 (Ctrl+Z)"
							OnClick="Undo"
							Disabled="CurrentFile == null" />

				<IconButton Icon="fas fa-redo"
							Size="sm"
							Variant="ghost-light"
							Title="重做 (Ctrl+Y)"
							OnClick="Redo"
							Disabled="CurrentFile == null" />

				<!-- 设置 -->
				<IconButton Icon="fas fa-cog"
							Size="sm"
							Variant="ghost-light"
							Title="编辑器设置"
							OnClick="ShowSettings" />

				<div class="mx-1 h-6 w-px bg-slate-700"></div>

				<!-- 本地文件系统操作 -->
				<IconButton Icon="fas fa-save"
							Size="sm"
							Variant="ghost-light"
							Title="保存到本地 (C:\FlowForge\Projects)"
							OnClick="SaveProjectToLocal" />

				<IconButton Icon="fas fa-folder-open"
							Size="sm"
							Variant="ghost-light"
							Title="从本地打开"
							OnClick="OpenProjectFromLocal" />

				<IconButton Icon="fas fa-info-circle"
							Size="sm"
							Variant="ghost-light"
							Title="本地路径信息"
							OnClick="ShowLocalPathInfo" />

				<div class="mx-1 h-6 w-px bg-slate-700"></div>

				<!-- 编译 -->
				<Button Variant="success"
						Size="sm"
						Icon="fas fa-hammer"
						OnClick="GoToCompile"
						Title="编译测试 (F5)">
					编译测试
				</Button>
			</div>
		</div>

		<!-- Monaco 编辑器容器 -->
		<div id="monaco-container" class="relative flex-1">
			@if (CurrentFile == null)
			{
				<!-- 欢迎屏幕 -->
				<div class="absolute inset-0 flex items-center justify-center">
					<div class="text-center">
						<div class="mx-auto mb-6 flex h-24 w-24 items-center justify-center rounded-2xl bg-slate-800">
							<i class="fas fa-code text-4xl text-slate-600"></i>
						</div>
						<h3 class="mb-2 text-lg font-semibold text-slate-200">
							FlowForge 代码编辑器
						</h3>
						<p class="mb-6 text-sm text-slate-400">
							从左侧选择文件开始编辑，或创建新文件
						</p>
						<div class="flex items-center justify-center gap-3">
							<Button Variant="primary"
									Size="sm"
									Icon="fas fa-file-plus"
									OnClick="NewFile">
								新建文件
							</Button>
							<Button Variant="secondary"
									Size="sm"
									Icon="fas fa-folder-open"
									OnClick="@(() => Navigation.NavigateTo("/projects"))">
								打开项目
							</Button>
						</div>

						<!-- 快捷键提示 -->
						<div class="mt-8 inline-block text-left">
							<div class="mb-3 text-xs font-semibold text-slate-400">快捷键</div>
							<div class="grid grid-cols-2 gap-x-6 gap-y-2 text-xs text-slate-500">
								<div class="flex items-center gap-3">
									<kbd class="kbd-dark">Ctrl+N</kbd>
									<span>新建文件</span>
								</div>
								<div class="flex items-center gap-3">
									<kbd class="kbd-dark">Ctrl+S</kbd>
									<span>保存文件</span>
								</div>
								<div class="flex items-center gap-3">
									<kbd class="kbd-dark">Ctrl+W</kbd>
									<span>关闭标签</span>
								</div>
								<div class="flex items-center gap-3">
									<kbd class="kbd-dark">Ctrl+F</kbd>
									<span>查找</span>
								</div>
								<div class="flex items-center gap-3">
									<kbd class="kbd-dark">Shift+Alt+F</kbd>
									<span>格式化</span>
								</div>
								<div class="flex items-center gap-3">
									<kbd class="kbd-dark">Ctrl+/</kbd>
									<span>注释切换</span>
								</div>
								<div class="flex items-center gap-3">
									<kbd class="kbd-dark">F5</kbd>
									<span>编译测试</span>
								</div>
								<div class="flex items-center gap-3">
									<kbd class="kbd-dark">Ctrl+Z</kbd>
									<span>撤销</span>
								</div>
							</div>
						</div>
					</div>
				</div>
			}
			else if (_isLoadingFile)
			{
				<div class="absolute inset-0 flex items-center justify-center">
					<div class="text-center">
						<i class="fas fa-spinner fa-spin mb-3 text-3xl text-slate-600"></i>
						<p class="text-sm text-slate-400">加载文件中...</p>
					</div>
				</div>
			}
		</div>

		<!-- 底部状态栏 -->
		<div class="flex h-6 items-center justify-between border-t border-slate-700 bg-slate-800 px-4 text-xs text-slate-400">
			<div class="flex items-center gap-4">
				@if (CurrentFile != null)
				{
					<span>行 @_EditorState.Line, 列 @_EditorState.Column</span>
					<span>@GetLanguageName(CurrentFile.Path)</span>
					<span>UTF-8</span>
					<span>LF</span>
					@if (_EditorState.SelectionCount > 0)
					{
						<span>已选 @_EditorState.SelectionCount 字符</span>
					}
				}
				else
				{
					<span>就绪</span>
				}
			</div>

			<div class="flex items-center gap-4">
				@if (_AnalysisState.IsAnalyzing)
				{
					<span class="flex items-center gap-2 text-blue-400">
						<i class="fas fa-spinner fa-spin text-xs"></i>
						<span>分析中...</span>
					</span>
				}
				else
				{
					@if (_AnalysisState.HasErrors)
					{
						<button class="flex items-center gap-2 transition-colors hover:text-rose-400"
								@onclick="ShowProblemsPanel"
								title="点击查看错误详情">
							<i class="fas fa-times-circle text-rose-500"></i>
							<span>@_AnalysisState.ErrorCount 个错误</span>
						</button>
					}
					@if (_AnalysisState.HasWarnings)
					{
						<button class="flex items-center gap-2 transition-colors hover:text-amber-400"
								@onclick="ShowProblemsPanel"
								title="点击查看警告详情">
							<i class="fas fa-exclamation-triangle text-amber-500"></i>
							<span>@_AnalysisState.WarningCount 个警告</span>
						</button>
					}
					@if (!_AnalysisState.HasErrors && !_AnalysisState.HasWarnings && CurrentFile != null)
					{
						<span class="flex items-center gap-2 text-emerald-500">
							<i class="fas fa-check-circle text-xs"></i>
							<span>无问题</span>
						</span>
					}
				}

				<button class="transition-colors hover:text-white"
						@onclick="CycleTheme"
						title="切换主题">
					<span>@GetThemeDisplayName()</span>
				</button>
				<span>空格: @_EditorSettings.TabSize</span>
			</div>
		</div>
	</div>

	<!-- 右侧面板 -->
	<div class="flex w-80 flex-col border-l border-slate-700 bg-slate-800">
		<!-- 面板标签 -->
		<div class="flex h-12 items-center gap-2 border-b border-slate-700 px-3">
			<button class="h-8 flex-1 rounded text-xs font-medium transition-colors
                          @(ActivePanel == "outline" ?
										 		   "bg-slate-700 text-white" :
									   		   "text-slate-400 hover:text-white hover:bg-slate-700/50")"
					@onclick="@(() => ActivePanel = "outline")"
					title="代码大纲">
				<i class="fas fa-list-tree mr-1 text-xs"></i>
				大纲
			</button>
			<button class="h-8 flex-1 rounded text-xs font-medium transition-colors
                          @(ActivePanel == "problems" ?
										 		   "bg-slate-700 text-white" :
									   		   "text-slate-400 hover:text-white hover:bg-slate-700/50")"
					@onclick="@(() => ActivePanel = "problems")"
					title="问题列表">
				<i class="fas fa-exclamation-circle mr-1 text-xs"></i>
				问题 @(Diagnostics.Any() ? $"({Diagnostics.Count})" : "")
			</button>
			<button class="h-8 flex-1 rounded text-xs font-medium transition-colors
                          @(ActivePanel == "search" ?
										 		   "bg-slate-700 text-white" :
									   		   "text-slate-400 hover:text-white hover:bg-slate-700/50")"
					@onclick="@(() => ActivePanel = "search")"
					title="文件搜索">
				<i class="fas fa-search mr-1 text-xs"></i>
				搜索
			</button>
		</div>

		<!-- 面板内容 -->
		<div class="scrollable flex-1 overflow-y-auto p-3">
			@switch (ActivePanel)
			{
				case "outline":
					<CodeOutlinePanel Symbols="@CodeSymbols" OnSymbolClick="JumpToSymbol" />
					break;
				case "problems":
					<ProblemsPanel Diagnostics="@Diagnostics" OnDiagnosticClick="JumpToDiagnostic" />
					break;
				case "search":
					<SearchInFilesPanel OnSearchPerformed="PerformSearch" />
					break;
			}
		</div>
	</div>
</div>

<!-- 确认关闭对话框 -->
<Modal IsOpen="_showCloseConfirm"
	   IsOpenChanged="(value) => _showCloseConfirm = value"
	   Title="未保存的更改"
	   Icon="fas fa-exclamation-triangle"
	   IconColorClass="text-amber-600"
	   MaxWidth="sm">

	<div class="mb-4 text-sm text-slate-700">
		文件 <strong>@_fileToClose?.Name</strong> 有未保存的更改。
	</div>

	<div class="mt-4 flex items-center justify-end gap-2 border-t border-slate-200 pt-4">
		<Button Variant="secondary" OnClick="() => _showCloseConfirm = false">
			取消
		</Button>
		<Button Variant="warning" OnClick="CloseFileWithoutSaving">
			不保存
		</Button>
		<Button Variant="primary" OnClick="SaveAndCloseFile">
			保存并关闭
		</Button>
	</div>
</Modal>

<!-- 设置对话框 -->
<Modal IsOpen="_showSettingsDialog"
	   IsOpenChanged="(value) => _showSettingsDialog = value"
	   Title="编辑器设置"
	   Icon="fas fa-cog"
	   IconColorClass="text-slate-600"
	   MaxWidth="md">

	<div class="space-y-4">
		<FormGroup Title="主题设置" Icon="fas fa-palette">
			<Select Label="编辑器主题"
					Options="@ThemeOptions"
					Value="@_EditorSettings.Theme"
					ValueChanged="@((value) => ChangeTheme(value))" />
		</FormGroup>

		<FormGroup Title="编辑器配置" Icon="fas fa-sliders-h">
			<Input Label="Tab 大小"
				   Type="number"
				   Value="@_EditorSettings.TabSize.ToString()"
				   Min="2"
				   Max="8"
				   ValueChanged="@((value) => ChangeTabSize(int.TryParse(value, out var size) ? size : 4))" />

			<Checkbox Checked="@_EditorSettings.WordWrap"
					  CheckedChanged="@((value) => ToggleWordWrap(value))">
				自动换行
			</Checkbox>

			<Checkbox Checked="@_EditorSettings.Minimap"
					  CheckedChanged="@((value) => ToggleMinimap(value))">
				显示小地图
			</Checkbox>
		</FormGroup>
	</div>

	<div class="mt-4 flex items-center justify-end gap-2 border-t border-slate-200 pt-4">
		<Button Variant="secondary" OnClick="() => _showSettingsDialog = false">
			关闭
		</Button>
	</div>
</Modal>

<style>
	.kbd-dark {
		@@apply inline-flex items-center justify-center px-2 py-1 rounded bg-slate-700 border border-slate-600 text-slate-300 font-mono text-xs;
	}

	#monaco-container {
		position: relative;
		width: 100%;
		height: 100%;
	}

	.scrollable {
		overflow-y: auto;
		scrollbar-width: thin;
		scrollbar-color: rgba(148, 163, 184, 0.5) transparent;
	}

		.scrollable::-webkit-scrollbar {
			width: 6px;
			height: 6px;
		}

		.scrollable::-webkit-scrollbar-track {
			background: transparent;
		}

		.scrollable::-webkit-scrollbar-thumb {
			background: rgba(148, 163, 184, 0.5);
			border-radius: 3px;
		}

			.scrollable::-webkit-scrollbar-thumb:hover {
				background: rgba(148, 163, 184, 0.7);
			}
</style>

@code {
	#region 内部类

	class EditorState
	{
		public int Line { get; set; } = 1;
		public int Column { get; set; } = 1;
		public int SelectionCount { get; set; } = 0;
	}

	class AnalysisState
	{
		public bool IsAnalyzing { get; set; }
		public bool HasErrors { get; set; }
		public bool HasWarnings { get; set; }
		public int ErrorCount { get; set; }
		public int WarningCount { get; set; }
	}

	class EditorSettings
	{
		public string Theme { get; set; } = "vs-dark";
		public int TabSize { get; set; } = 4;
		public bool WordWrap { get; set; } = false;
		public bool Minimap { get; set; } = true;
	}

	#endregion

	#region 参数和字段

	[Parameter] public string ProjectId { get; set; } = "";

	private List<ProjectFile> ProjectFiles = new();
	private List<ProjectFile> OpenedFiles = new();
	private ProjectFile? CurrentFile = null;
	private Project? _currentProject = null;
	private FileTree? _fileTreeRef;
	private string ActivePanel = "outline";
	private bool HasUnsavedChanges => OpenedFiles.Any(f => f.IsDirty);
	private int TotalLines = 0;

	private EditorState _EditorState = new();
	private AnalysisState _AnalysisState = new();
	private EditorSettings _EditorSettings = new();
	private List<CodeSymbol> CodeSymbols = new();
	private List<Diagnostic> Diagnostics = new();

	private IJSObjectReference? _jsModule;
	private DotNetObjectReference<CodeEditor>? _dotnetHelper;
	private bool _isDisposed;
	private bool _isLoadingFiles;
	private bool _isLoadingFile;
	private bool _showCloseConfirm;
	private bool _showSettingsDialog;
	private ProjectFile? _fileToClose;
	private Dictionary<string, string> _fileContents = new();
	private System.Threading.Timer? _analysisDebounceTimer;

	private List<Select.SelectOption> ThemeOptions = new()
	{
		new("vs-dark", "深色主题"),
		new("vs", "浅色主题"),
		new("hc-black", "高对比度")
	};

	#endregion

	#region 生命周期方法

	protected override async Task OnInitializedAsync()
	{
		try
		{
			// 加载当前项目信息
			_currentProject = await ProjectService.GetProjectAsync(ProjectId);

			// 加载主题设置
			var theme = await ThemeService.GetCurrentThemeAsync();
			if (!string.IsNullOrEmpty(theme))
			{
				_EditorSettings.Theme = theme == "dark" ? "vs-dark" : "vs";
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"初始化失败: {ex.Message}");
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await InitializeJs();
			await InitializeMonaco();
			await LoadProject();
		}
	}

	public async ValueTask DisposeAsync()
	{
		if (_isDisposed) return;

		_analysisDebounceTimer?.Dispose();
		_dotnetHelper?.Dispose();

		if (_jsModule != null)
		{
			try
			{
				await _jsModule.DisposeAsync();
			}
			catch { }
		}

		_isDisposed = true;
	}

	#endregion

	#region Monaco 初始化

	private async Task InitializeJs()
	{
		if (_jsModule is not null) return;

		try
		{
			_jsModule = await JS.InvokeAsync<IJSObjectReference>(
				"import", "./_content/Zhg.FlowForge.App.Shared/js/monaco.js");
			_dotnetHelper = DotNetObjectReference.Create(this);
		}
		catch (JSException ex)
		{
			Console.WriteLine($"Monaco初始化失败: {ex.Message}");
			ToastService.Error("编辑器初始化失败，请刷新页面重试");
		}
	}

	private async Task InitializeMonaco()
	{
		try
		{
			await JS.InvokeVoidAsync("initMonacoEditor", new
			{
				containerId = "monaco-container",
				theme = _EditorSettings.Theme,
				fontSize = 14,
				tabSize = _EditorSettings.TabSize,
				minimap = new { enabled = _EditorSettings.Minimap },
				automaticLayout = true,
				scrollBeyondLastLine = false,
				wordWrap = _EditorSettings.WordWrap ? "on" : "off",
				folding = true,
				lineNumbers = "on"
			});

			await JS.InvokeVoidAsync("registerMonacoCallbacks", _dotnetHelper);
			await RegisterKeyboardShortcuts();

			ToastService.Success("编辑器已就绪");
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Monaco初始化失败: {ex.Message}");
			ToastService.Error("编辑器初始化失败");
		}
	}

	private async Task RegisterKeyboardShortcuts()
	{
		try
		{
			await JS.InvokeVoidAsync("registerMonacoKeybinding", "ctrl+s", "saveCurrentFile");
			await JS.InvokeVoidAsync("registerMonacoKeybinding", "ctrl+w", "closeCurrentFile");
			await JS.InvokeVoidAsync("registerMonacoKeybinding", "ctrl+n", "newFile");
			await JS.InvokeVoidAsync("registerMonacoKeybinding", "ctrl+f", "showFind");
			await JS.InvokeVoidAsync("registerMonacoKeybinding", "shift+alt+f", "formatDocument");
			await JS.InvokeVoidAsync("registerMonacoKeybinding", "f5", "compile");
		}
		catch (Exception ex)
		{
			Console.WriteLine($"注册快捷键失败: {ex.Message}");
		}
	}

	#endregion

	#region 项目和文件加载

	private async Task LoadProject()
	{
		_isLoadingFiles = true;
		StateHasChanged();

		try
		{
			ProjectFiles = await ProjectService.GetProjectFilesAsync(ProjectId);
			TotalLines = CalculateTotalLines(ProjectFiles);
			_fileContents.Clear();

			ToastService.Info($"已加载 {GetTotalFileCount()} 个文件");
		}
		catch (Exception ex)
		{
			Console.WriteLine($"加载项目文件失败: {ex.Message}");
			ToastService.Error("加载项目文件失败");
		}
		finally
		{
			_isLoadingFiles = false;
			StateHasChanged();
		}
	}

	private int CalculateTotalLines(List<ProjectFile> files)
	{
		int total = 0;
		foreach (var file in files)
		{
			if (!file.IsFolder)
			{
				total += file.LineCount;
			}
			if (file.SubFiles != null && file.SubFiles.Any())
			{
				total += CalculateTotalLines(file.SubFiles);
			}
		}
		return total;
	}

	private int GetTotalFileCount()
	{
		return CountFiles(ProjectFiles);
	}

	private int CountFiles(List<ProjectFile> files)
	{
		int count = 0;
		foreach (var file in files)
		{
			if (!file.IsFolder)
			{
				count++;
			}
			if (file.SubFiles != null && file.SubFiles.Any())
			{
				count += CountFiles(file.SubFiles);
			}
		}
		return count;
	}
	#endregion
	#region 文件操作

	private async Task OpenFile(ProjectFile file)
	{
		if (file == null || file.IsFolder) return;

		try
		{
			_isLoadingFile = true;
			StateHasChanged();

			// 保存当前文件内容
			if (CurrentFile != null)
			{
				var currentContent = await JS.InvokeAsync<string>("getMonacoContent");
				_fileContents[CurrentFile.Path] = currentContent;
			}

			if (!OpenedFiles.Contains(file))
			{
				OpenedFiles.Add(file);
			}

			CurrentFile = file;

			// 从缓存或服务加载内容
			string content;
			if (_fileContents.TryGetValue(file.Path, out var cachedContent))
			{
				content = cachedContent;
			}
			else
			{
				content = await ProjectService.GetFileContentAsync(ProjectId, file.Path);
				_fileContents[file.Path] = content;
			}

			await JS.InvokeVoidAsync("setMonacoContent", content, GetLanguage(file.Path));

			// 展开文件树到该文件
			_fileTreeRef?.ExpandToFile(file.Path);

			// 异步执行分析，不阻塞界面
			_ = AnalyzeCurrentFile();
			_ = UpdateCodeOutline();

			ToastService.Success($"已打开: {file.Name}");
		}
		catch (Exception ex)
		{
			Console.WriteLine($"打开文件失败: {ex.Message}");
			ToastService.Error($"打开文件失败: {ex.Message}");
		}
		finally
		{
			_isLoadingFile = false;
			StateHasChanged();
		}
	}

	private async Task SwitchToFile(ProjectFile file)
	{
		if (file == null || file == CurrentFile) return;

		try
		{
			// 保存当前文件的内容
			if (CurrentFile != null)
			{
				var currentContent = await JS.InvokeAsync<string>("getMonacoContent");
				_fileContents[CurrentFile.Path] = currentContent;
			}

			CurrentFile = file;
			var content = _fileContents.GetValueOrDefault(file.Path, "");
			await JS.InvokeVoidAsync("setMonacoContent", content, GetLanguage(file.Path));

			_ = AnalyzeCurrentFile();
			_ = UpdateCodeOutline();
		}
		catch (Exception ex)
		{
			Console.WriteLine($"切换文件失败: {ex.Message}");
			ToastService.Error("切换文件失败");
		}
	}

	private async Task CloseFile(ProjectFile file)
	{
		if (file == null) return;

		if (file.IsDirty)
		{
			_fileToClose = file;
			_showCloseConfirm = true;
			return;
		}

		await PerformCloseFile(file);
	}

	private async Task SaveAndCloseFile()
	{
		if (_fileToClose != null)
		{
			try
			{
				var content = _fileContents.GetValueOrDefault(_fileToClose.Path, "");
				if (_fileToClose == CurrentFile)
				{
					content = await JS.InvokeAsync<string>("getMonacoContent");
				}

				await ProjectService.SaveFileAsync(ProjectId, _fileToClose.Path, content);
				_fileToClose.IsDirty = false;
				_fileContents[_fileToClose.Path] = content;

				await PerformCloseFile(_fileToClose);
				ToastService.Success("文件已保存并关闭");
			}
			catch (Exception ex)
			{
				ToastService.Error($"保存失败: {ex.Message}");
			}
		}

		_showCloseConfirm = false;
		_fileToClose = null;
	}

	private async Task CloseFileWithoutSaving()
	{
		if (_fileToClose != null)
		{
			await PerformCloseFile(_fileToClose);
		}

		_showCloseConfirm = false;
		_fileToClose = null;
	}

	private async Task PerformCloseFile(ProjectFile file)
	{
		OpenedFiles.Remove(file);
		_fileContents.Remove(file.Path);

		if (CurrentFile == file)
		{
			if (OpenedFiles.Any())
			{
				await SwitchToFile(OpenedFiles.Last());
			}
			else
			{
				CurrentFile = null;
				await JS.InvokeVoidAsync("setMonacoContent", "", "plaintext");
				CodeSymbols.Clear();
				Diagnostics.Clear();
			}
		}

		StateHasChanged();
	}

	private async Task SaveAll()
	{
		try
		{
			var savedCount = 0;
			foreach (var file in OpenedFiles.Where(f => f.IsDirty).ToList())
			{
				string content;
				if (file == CurrentFile)
				{
					content = await JS.InvokeAsync<string>("getMonacoContent");
				}
				else
				{
					content = _fileContents.GetValueOrDefault(file.Path, "");
				}

				await ProjectService.SaveFileAsync(ProjectId, file.Path, content);
				file.IsDirty = false;
				_fileContents[file.Path] = content;
				savedCount++;
			}

			ToastService.Success($"已保存 {savedCount} 个文件");

			// 刷新项目信息以更新同步状态
			_currentProject = await ProjectService.GetProjectAsync(ProjectId);
			StateHasChanged();
		}
		catch (Exception ex)
		{
			Console.WriteLine($"保存文件失败: {ex.Message}");
			ToastService.Error($"保存失败: {ex.Message}");
		}
	}

	private async Task NewFile()
	{
		try
		{
			var fileName = await JS.InvokeAsync<string>("prompt", "请输入文件名", "NewFile.cs");
			if (string.IsNullOrWhiteSpace(fileName))
			{
				return;
			}

			// 确保文件名有扩展名
			if (!Path.HasExtension(fileName))
			{
				fileName += ".cs";
			}

			// 生成初始内容
			var initialContent = GetInitialFileContent(fileName);

			var newFile = await ProjectService.CreateFileAsync(ProjectId, fileName, initialContent);

			// 重新加载文件列表
			await RefreshFiles();

			// 打开新文件
			var fileInList = FindFileByPath(ProjectFiles, fileName);
			if (fileInList != null)
			{
				await OpenFile(fileInList);
			}

			ToastService.Success($"已创建文件: {fileName}");
		}
		catch (Exception ex)
		{
			Console.WriteLine($"创建文件失败: {ex.Message}");
			ToastService.Error($"创建文件失败: {ex.Message}");
		}
	}

	private async Task NewFolder()
	{
		try
		{
			var folderName = await JS.InvokeAsync<string>("prompt", "请输入文件夹名", "NewFolder");
			if (string.IsNullOrWhiteSpace(folderName))
			{
				return;
			}

			// 创建占位文件
			var placeholderFile = $"{folderName}/.gitkeep";
			await ProjectService.CreateFileAsync(ProjectId, placeholderFile, "");

			await RefreshFiles();

			// 展开新建的文件夹
			_fileTreeRef?.ExpandToFile(folderName);

			ToastService.Success($"已创建文件夹: {folderName}");
		}
		catch (Exception ex)
		{
			Console.WriteLine($"创建文件夹失败: {ex.Message}");
			ToastService.Error($"创建文件夹失败: {ex.Message}");
		}
	}

	// 新增：在文件夹内创建文件
	private async Task HandleNewFileInFolder((string folderPath, bool isFile) args)
	{
		try
		{
			if (args.isFile)
			{
				// 在文件夹内创建文件
				var fileName = await JS.InvokeAsync<string>("prompt", "请输入文件名", "NewFile.cs");
				if (string.IsNullOrWhiteSpace(fileName))
				{
					return;
				}

				if (!Path.HasExtension(fileName))
				{
					fileName += ".cs";
				}

				var fullPath = $"{args.folderPath}/{fileName}";
				var initialContent = GetInitialFileContent(fileName);
				var newFile = await ProjectService.CreateFileAsync(ProjectId, fullPath, initialContent);

				await RefreshFiles();

				// 展开文件夹并打开文件
				_fileTreeRef?.ExpandToFile(fullPath);
				var fileInList = FindFileByPath(ProjectFiles, fullPath);
				if (fileInList != null)
				{
					await OpenFile(fileInList);
				}

				ToastService.Success($"已在 {args.folderPath} 中创建文件: {fileName}");
			}
			else
			{
				// 在文件夹内创建子文件夹
				var folderName = await JS.InvokeAsync<string>("prompt", "请输入文件夹名", "NewFolder");
				if (string.IsNullOrWhiteSpace(folderName))
				{
					return;
				}

				var fullPath = $"{args.folderPath}/{folderName}";
				var placeholderFile = $"{fullPath}/.gitkeep";
				await ProjectService.CreateFileAsync(ProjectId, placeholderFile, "");

				await RefreshFiles();

				// 展开到新文件夹
				_fileTreeRef?.ExpandToFile(fullPath);

				ToastService.Success($"已在 {args.folderPath} 中创建文件夹: {folderName}");
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"创建失败: {ex.Message}");
			ToastService.Error($"创建失败: {ex.Message}");
		}
	}

	private async Task RefreshFiles()
	{
		await LoadProject();
		ToastService.Info("文件列表已刷新");
	}

	private async Task RenameFile(ProjectFile file)
	{
		if (file == null) return;

		try
		{
			var currentName = Path.GetFileName(file.Path);
			var newName = await JS.InvokeAsync<string>("prompt", "请输入新名称", currentName);

			if (string.IsNullOrWhiteSpace(newName) || newName == currentName)
			{
				return;
			}

			var directory = Path.GetDirectoryName(file.Path)?.Replace("\\", "/") ?? "";
			var newPath = string.IsNullOrEmpty(directory)
				? newName
				: $"{directory}/{newName}";

			await ProjectService.RenameFileAsync(ProjectId, file.Path, newPath);

			// 更新缓存
			if (_fileContents.ContainsKey(file.Path))
			{
				var content = _fileContents[file.Path];
				_fileContents.Remove(file.Path);
				_fileContents[newPath] = content;
			}

			// 更新当前文件引用
			if (CurrentFile == file)
			{
				file.Path = newPath;
				file.Name = newName;
			}

			// 更新打开的文件列表
			var openedFile = OpenedFiles.FirstOrDefault(f => f.Path == file.Path);
			if (openedFile != null)
			{
				openedFile.Path = newPath;
				openedFile.Name = newName;
			}

			await RefreshFiles();
			ToastService.Success($"已重命名为: {newName}");
		}
		catch (Exception ex)
		{
			Console.WriteLine($"重命名文件失败: {ex.Message}");
			ToastService.Error($"重命名失败: {ex.Message}");
		}
	}

	private async Task DeleteFile(ProjectFile file)
	{
		if (file == null) return;

		try
		{
			var fileName = Path.GetFileName(file.Path);
			var confirmMessage = file.IsFolder
				? $"确定要删除文件夹 '{fileName}' 及其所有内容吗？"
				: $"确定要删除文件 '{fileName}' 吗？";

			var confirm = await JS.InvokeAsync<bool>("confirm", confirmMessage);
			if (!confirm)
			{
				return;
			}

			await ProjectService.DeleteFileAsync(ProjectId, file.Path);

			// 从缓存中移除
			_fileContents.Remove(file.Path);

			// 从打开的文件列表中移除
			if (OpenedFiles.Contains(file))
			{
				await PerformCloseFile(file);
			}

			await RefreshFiles();
			ToastService.Success($"已删除: {fileName}");
		}
		catch (Exception ex)
		{
			Console.WriteLine($"删除文件失败: {ex.Message}");
			ToastService.Error($"删除失败: {ex.Message}");
		}
	}

	#endregion

	#region 编辑器操作

	private async Task FormatDocument()
	{
		if (CurrentFile == null) return;

		try
		{
			await JS.InvokeVoidAsync("formatMonacoDocument");
			var formattedContent = await JS.InvokeAsync<string>("getMonacoContent");

			if (formattedContent != _fileContents.GetValueOrDefault(CurrentFile.Path))
			{
				_fileContents[CurrentFile.Path] = formattedContent;
				CurrentFile.IsDirty = true;
				_ = AnalyzeCurrentFile();
			}

			ToastService.Success("代码已格式化");
		}
		catch (Exception ex)
		{
			Console.WriteLine($"格式化失败: {ex.Message}");
			ToastService.Error($"格式化失败: {ex.Message}");
		}
	}

	private async Task ShowFindDialog()
	{
		if (CurrentFile != null)
		{
			await JS.InvokeVoidAsync("showMonacoFind");
		}
	}

	private async Task Undo()
	{
		if (CurrentFile != null)
		{
			await JS.InvokeVoidAsync("monacoUndo");
		}
	}

	private async Task Redo()
	{
		if (CurrentFile != null)
		{
			await JS.InvokeVoidAsync("monacoRedo");
		}
	}

	private async Task CycleTheme()
	{
		var themes = new[] { "vs-dark", "vs", "hc-black" };
		var currentIndex = Array.IndexOf(themes, _EditorSettings.Theme);
		var nextIndex = (currentIndex + 1) % themes.Length;
		_EditorSettings.Theme = themes[nextIndex];

		await JS.InvokeVoidAsync("setMonacoTheme", _EditorSettings.Theme);
		await JS.InvokeVoidAsync("localStorage.setItem", "editor-theme", _EditorSettings.Theme);

		ToastService.Info($"已切换到 {GetThemeDisplayName()}");
		StateHasChanged();
	}

	private async Task ShowSettings()
	{
		_showSettingsDialog = true;
	}

	private async Task ChangeTheme(string theme)
	{
		_EditorSettings.Theme = theme;
		await JS.InvokeVoidAsync("setMonacoTheme", theme);
		await JS.InvokeVoidAsync("localStorage.setItem", "editor-theme", theme);
		StateHasChanged();
	}

	private async Task ChangeTabSize(int size)
	{
		_EditorSettings.TabSize = size;
		StateHasChanged();
	}

	private async Task ToggleWordWrap(bool enabled)
	{
		_EditorSettings.WordWrap = enabled;
		StateHasChanged();
	}

	private async Task ToggleMinimap(bool enabled)
	{
		_EditorSettings.Minimap = enabled;
		StateHasChanged();
	}

	private void GoToCompile()
	{
		if (HasUnsavedChanges)
		{
			ToastService.Warning("有未保存的更改，请先保存");
			return;
		}

		Navigation.NavigateTo($"/compile/{ProjectId}");
	}

	#endregion

	#region 本地文件系统操作

	private async Task SaveProjectToLocal()
	{
		try
		{
			var success = await ProjectService.SaveProjectToLocalAsync(ProjectId, "");
			if (success)
			{
				var path = await ProjectService.GetProjectRootPathAsync(ProjectId);
				_currentProject = await ProjectService.GetProjectAsync(ProjectId);
				ToastService.Success($"项目已保存到本地: {path}");
				StateHasChanged();
			}
			else
			{
				ToastService.Error("保存到本地失败");
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"保存到本地失败: {ex.Message}");
			ToastService.Error($"保存失败: {ex.Message}");
		}
	}

	private async Task OpenProjectFromLocal()
	{
		try
		{
			var localPath = await JS.InvokeAsync<string>("promptDirectory", "选择项目目录");

			if (!string.IsNullOrWhiteSpace(localPath))
			{
				var project = await ProjectService.LoadProjectFromLocalAsync(localPath);
				Navigation.NavigateTo($"/editor/{project.Id}");
				ToastService.Success($"已从本地加载项目: {project.Name}");
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"从本地加载失败: {ex.Message}");
			ToastService.Error($"加载失败: {ex.Message}");
		}
	}

	private async Task ShowLocalPathInfo()
	{
		try
		{
			var path = await ProjectService.GetProjectRootPathAsync(ProjectId);
			var exists = await ProjectService.ExistsInLocalAsync(ProjectId);

			var message = exists
				? $"项目已保存在:\n{path}\n\n您可以使用 VS Code 或 Visual Studio 打开此目录"
				: $"项目尚未保存到本地\n\n建议路径:\n{path}\n\n点击工具栏的保存按钮将项目保存到本地";

			await JS.InvokeVoidAsync("alert", message);
		}
		catch (Exception ex)
		{
			ToastService.Error($"获取路径信息失败: {ex.Message}");
		}
	}

	#endregion

	#region 代码分析

	private async Task AnalyzeCurrentFile()
	{
		if (CurrentFile == null) return;

		// 取消之前的分析任务
		_analysisDebounceTimer?.Dispose();

		_AnalysisState.IsAnalyzing = true;
		StateHasChanged();

		// 使用防抖避免频繁分析
		_analysisDebounceTimer = new System.Threading.Timer(async _ =>
		{
			try
			{
				var content = await JS.InvokeAsync<string>("getMonacoContent");
				Diagnostics = await AnalysisService.AnalyzeCodeAsync(content, GetLanguage(CurrentFile.Path));

				_AnalysisState.ErrorCount = Diagnostics.Count(d => d.Severity == "Error");
				_AnalysisState.WarningCount = Diagnostics.Count(d => d.Severity == "Warning");
				_AnalysisState.HasErrors = _AnalysisState.ErrorCount > 0;
				_AnalysisState.HasWarnings = _AnalysisState.WarningCount > 0;

				await JS.InvokeVoidAsync("setMonacoDiagnostics", Diagnostics);
			}
			catch (Exception ex)
			{
				Console.WriteLine($"代码分析失败: {ex.Message}");
			}
			finally
			{
				_AnalysisState.IsAnalyzing = false;
				await InvokeAsync(StateHasChanged);
			}

			_analysisDebounceTimer?.Dispose();
		}, null, 800, Timeout.Infinite);
	}

	private async Task UpdateCodeOutline()
	{
		if (CurrentFile == null) return;

		try
		{
			var content = await JS.InvokeAsync<string>("getMonacoContent");
			CodeSymbols = await AnalysisService.GetCodeOutlineAsync(content, GetLanguage(CurrentFile.Path));
		}
		catch (Exception ex)
		{
			Console.WriteLine($"获取代码大纲失败: {ex.Message}");
			CodeSymbols.Clear();
		}

		StateHasChanged();
	}

	#endregion

	#region JavaScript 回调

	[JSInvokable]
	public async Task OnContentChanged()
	{
		if (CurrentFile != null)
		{
			try
			{
				var newContent = await JS.InvokeAsync<string>("getMonacoContent");
				if (newContent != _fileContents.GetValueOrDefault(CurrentFile.Path))
				{
					CurrentFile.IsDirty = true;
					_fileContents[CurrentFile.Path] = newContent;

					// 异步执行分析
					_ = AnalyzeCurrentFile();
					_ = UpdateCodeOutline();

					StateHasChanged();
				}
			}
			catch (Exception ex)
			{
				Console.WriteLine($"内容变更处理失败: {ex.Message}");
			}
		}
	}

	[JSInvokable]
	public void OnCursorPositionChanged(int line, int column)
	{
		_EditorState.Line = line;
		_EditorState.Column = column;
		StateHasChanged();
	}

	[JSInvokable]
	public void OnSelectionChanged(int selectionCount)
	{
		_EditorState.SelectionCount = selectionCount;
		StateHasChanged();
	}

	[JSInvokable]
	public async Task HandleKeybinding(string command)
	{
		try
		{
			switch (command)
			{
				case "saveCurrentFile":
					if (CurrentFile != null && CurrentFile.IsDirty)
					{
						var content = await JS.InvokeAsync<string>("getMonacoContent");
						await ProjectService.SaveFileAsync(ProjectId, CurrentFile.Path, content);
						CurrentFile.IsDirty = false;
						_fileContents[CurrentFile.Path] = content;
						ToastService.Success($"已保存: {Path.GetFileName(CurrentFile.Path)}");
					}
					break;

				case "closeCurrentFile":
					if (CurrentFile != null)
					{
						await CloseFile(CurrentFile);
					}
					break;

				case "newFile":
					await NewFile();
					break;

				case "showFind":
					await ShowFindDialog();
					break;

				case "formatDocument":
					await FormatDocument();
					break;

				case "compile":
					GoToCompile();
					break;
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"快捷键处理失败: {ex.Message}");
		}
	}

	#endregion

	#region 导航和面板

	private async Task JumpToSymbol(CodeSymbol symbol)
	{
		try
		{
			await JS.InvokeVoidAsync("jumpToPosition", symbol.Line, symbol.Column);
			ToastService.Info($"跳转到: {symbol.Name}");
		}
		catch (Exception ex)
		{
			Console.WriteLine($"跳转失败: {ex.Message}");
		}
	}

	private async Task JumpToDiagnostic(Diagnostic diagnostic)
	{
		try
		{
			await JS.InvokeVoidAsync("jumpToPosition", diagnostic.Line, diagnostic.Column);
		}
		catch (Exception ex)
		{
			Console.WriteLine($"跳转失败: {ex.Message}");
		}
	}

	private void ShowProblemsPanel()
	{
		ActivePanel = "problems";
		StateHasChanged();
	}

	private async Task PerformSearch(string query)
	{
		if (string.IsNullOrWhiteSpace(query)) return;

		try
		{
			await JS.InvokeVoidAsync("searchInMonaco", query);
			ToastService.Info($"搜索: {query}");
		}
		catch (Exception ex)
		{
			Console.WriteLine($"搜索失败: {ex.Message}");
			ToastService.Error("搜索失败");
		}
	}

	#endregion

	#region 辅助方法

	private ProjectFile? FindFileByPath(List<ProjectFile> files, string path)
	{
		foreach (var file in files)
		{
			if (file.Path == path)
			{
				return file;
			}

			if (file.SubFiles != null && file.SubFiles.Any())
			{
				var found = FindFileByPath(file.SubFiles, path);
				if (found != null)
				{
					return found;
				}
			}
		}

		return null;
	}

	private string GetInitialFileContent(string fileName)
	{
		var ext = Path.GetExtension(fileName).ToLower();
		var nameWithoutExt = Path.GetFileNameWithoutExtension(fileName);

		return ext switch
		{
			".cs" => $@"using System;
namespace FlowForge.Generated
{{
public class {nameWithoutExt}
{{
// TODO: 添加您的代码
}}
}}",
			".json" => @"{
""key"": ""value""
}",
			".xml" => @"<?xml version=""1.0"" encoding=""utf-8""?>
<root>
</root>",
			".md" => $@"# {nameWithoutExt}
描述
TODO: 添加描述
",
			_ => ""
		};
	}
	private string GetFileIcon(string path)
	{
		var ext = Path.GetExtension(path).ToLower();
		return ext switch
		{
			".cs" => "fas fa-file-code text-blue-400",
			".razor" => "fas fa-file-code text-purple-400",
			".json" => "fas fa-brackets-curly text-amber-400",
			".xml" => "fas fa-code text-rose-400",
			".csproj" => "fas fa-project-diagram text-green-400",
			".html" => "fas fa-file-code text-orange-400",
			".css" => "fas fa-file-code text-blue-500",
			".js" => "fas fa-file-code text-yellow-400",
			".ts" => "fas fa-file-code text-blue-500",
			".sql" => "fas fa-database text-slate-400",
			".md" => "fas fa-file-alt text-slate-400",
			_ => "fas fa-file text-slate-400"
		};
	}

	private string GetLanguage(string path)
	{
		var ext = Path.GetExtension(path).ToLower();
		return ext switch
		{
			".cs" => "csharp",
			".razor" => "razor",
			".json" => "json",
			".xml" => "xml",
			".html" => "html",
			".css" => "css",
			".js" => "javascript",
			".ts" => "typescript",
			".sql" => "sql",
			".md" => "markdown",
			_ => "plaintext"
		};
	}

	private string GetLanguageName(string path)
	{
		var ext = Path.GetExtension(path).ToLower();
		return ext switch
		{
			".cs" => "C#",
			".razor" => "Razor",
			".json" => "JSON",
			".xml" => "XML",
			".html" => "HTML",
			".css" => "CSS",
			".js" => "JavaScript",
			".ts" => "TypeScript",
			".sql" => "SQL",
			".md" => "Markdown",
			_ => "Plain Text"
		};
	}

	private string GetThemeDisplayName()
	{
		return _EditorSettings.Theme switch
		{
			"vs-dark" => "深色主题",
			"vs" => "浅色主题",
			"hc-black" => "高对比度",
			_ => _EditorSettings.Theme
		};
	}

	#endregion

}