@page "/deploy/{ProjectId}"
@using Zhg.FlowForge.App.Shared.Components.Buttons
@using Zhg.FlowForge.App.Shared.Models
@layout EditorLayout
@inject IProjectService ProjectService
@inject IDeploymentService DeploymentService
@inject NavigationManager Navigation
@inject IToastService ToastService

<PageTitle>项目部署 - FlowForge</PageTitle>

<div class="flex h-screen bg-slate-50">
	<!-- 左侧部署配置 -->
	<div class="flex w-80 flex-col border-r border-slate-200 bg-white">
		<!-- 头部 -->
		<div class="flex h-14 items-center justify-between border-b border-slate-200 px-4">
			<h2 class="text-sm font-semibold text-slate-900">部署配置</h2>
			<button class="flex h-7 w-7 items-center justify-center rounded-md hover:bg-slate-100"
					@onclick="() => Navigation.NavigateTo($\"/editor/{ProjectId}\")">
				<i class="fas fa-times text-xs text-slate-600"></i>
			</button>
		</div>

		<!-- 配置表单 -->
		<div class="scrollable flex-1 overflow-y-auto p-4">
			<div class="space-y-4">
				<!-- 部署目标 -->
				<div>
					<label class="mb-2 block text-xs font-semibold text-slate-700">部署目标</label>
					<select @bind="SelectedTarget"
							class="w-full rounded-lg border border-slate-300 bg-white px-3 py-2 text-sm focus:border-blue-500 focus:outline-none">
						<option value="local">本地服务器</option>
						<option value="docker">Docker 容器</option>
						<option value="azure">Azure App Service</option>
						<option value="aws">AWS Elastic Beanstalk</option>
						<option value="custom">自定义服务器</option>
					</select>
				</div>

				<!-- 环境选择 -->
				<div>
					<label class="mb-2 block text-xs font-semibold text-slate-700">部署环境</label>
					<div class="space-y-2">
						<label class="flex items-center gap-2">
							<input type="radio" name="environment" value="development"
								   @onchange="() => SelectedEnvironment = \"development\""
								   checked="@(SelectedEnvironment == \"development\")"
								   class="h-4 w-4 text-blue-600" />
							<span class="text-sm text-slate-700">开发环境</span>
						</label>
						<label class="flex items-center gap-2">
							<input type="radio" name="environment" value="staging"
								   @onchange="() => SelectedEnvironment = \"staging\""
								   checked="@(SelectedEnvironment == \"staging\")"
								   class="h-4 w-4 text-blue-600" />
							<span class="text-sm text-slate-700">测试环境</span>
						</label>
						<label class="flex items-center gap-2">
							<input type="radio" name="environment" value="production"
								   @onchange="() => SelectedEnvironment = \"production\""
								   checked="@(SelectedEnvironment == \"production\")"
								   class="h-4 w-4 text-blue-600" />
							<span class="text-sm text-slate-700">生产环境</span>
						</label>
					</div>
				</div>

				<!-- 构建配置 -->
				<div>
					<label class="mb-2 block text-xs font-semibold text-slate-700">构建配置</label>
					<select @bind="BuildConfiguration"
							class="w-full rounded-lg border border-slate-300 bg-white px-3 py-2 text-sm focus:border-blue-500 focus:outline-none">
						<option value="Debug">Debug</option>
						<option value="Release">Release</option>
					</select>
				</div>

				<!-- 部署选项 -->
				<div>
					<label class="mb-2 block text-xs font-semibold text-slate-700">部署选项</label>
					<div class="space-y-2">
						<label class="flex items-center gap-2">
							<input type="checkbox" @bind="RunMigrations"
								   class="h-4 w-4 rounded text-blue-600" />
							<span class="text-sm text-slate-700">运行数据库迁移</span>
						</label>
						<label class="flex items-center gap-2">
							<input type="checkbox" @bind="RunTests"
								   class="h-4 w-4 rounded text-blue-600" />
							<span class="text-sm text-slate-700">部署前运行测试</span>
						</label>
						<label class="flex items-center gap-2">
							<input type="checkbox" @bind="BackupBeforeDeploy"
								   class="h-4 w-4 rounded text-blue-600" />
							<span class="text-sm text-slate-700">部署前备份</span>
						</label>
					</div>
				</div>

				<!-- 服务器配置 -->
				@if (SelectedTarget == "custom")
				{
					<div>
						<label class="mb-2 block text-xs font-semibold text-slate-700">服务器地址</label>
						<input type="text" @bind="ServerAddress"
							   placeholder="例如: 192.168.1.100"
							   class="w-full rounded-lg border border-slate-300 px-3 py-2 text-sm focus:border-blue-500 focus:outline-none" />
					</div>

					<div>
						<label class="mb-2 block text-xs font-semibold text-slate-700">用户名</label>
						<input type="text" @bind="ServerUsername"
							   class="w-full rounded-lg border border-slate-300 px-3 py-2 text-sm focus:border-blue-500 focus:outline-none" />
					</div>
				}
			</div>
		</div>

		<!-- 底部部署按钮 -->
		<div class="border-t border-slate-200 p-4">
			<Button Variant="primary"
					Size="md"
					Icon="fas fa-rocket"
					FullWidth="true"
					Loading="@IsDeploying"
					OnClick="StartDeployment">
				开始部署
			</Button>
		</div>
	</div>

	<!-- 中间部署日志 -->
	<div class="flex flex-1 flex-col">
		<!-- 工具栏 -->
		<div class="flex h-14 items-center justify-between border-b border-slate-200 bg-white px-6">
			<div class="flex items-center gap-3">
				<i class="fas fa-terminal text-blue-600"></i>
				<h3 class="text-sm font-semibold text-slate-900">部署日志</h3>
			</div>

			<div class="flex items-center gap-2">
				<IconButton Icon="fas fa-trash"
						   Size="sm"
						   Variant="ghost"
						   Title="清空日志"
						   OnClick="ClearLogs" />
				<IconButton Icon="fas fa-download"
						   Size="sm"
						   Variant="ghost"
						   Title="下载日志"
						   OnClick="DownloadLogs" />
			</div>
		</div>

		<!-- 日志内容 -->
		<div class="scrollable flex-1 overflow-y-auto bg-slate-900 p-4 font-mono text-sm">
			@if (DeploymentLogs.Any())
			{
				@foreach (var log in DeploymentLogs)
				{
					<div class="@GetLogClass(log.Level)">
						<span class="text-slate-500">[@log.Timestamp.ToString("HH:mm:ss")]</span>
						<span class="ml-2">@log.Message</span>
					</div>
				}
			}
			else
			{
				<div class="flex h-full items-center justify-center text-slate-500">
					<div class="text-center">
						<i class="fas fa-info-circle mb-2 text-2xl"></i>
						<p>暂无部署日志</p>
						<p class="mt-1 text-xs">点击"开始部署"开始部署流程</p>
					</div>
				</div>
			}
		</div>

		<!-- 状态栏 -->
		<div class="flex h-10 items-center justify-between border-t border-slate-700 bg-slate-800 px-4 text-xs text-slate-400">
			<div class="flex items-center gap-4">
				@if (IsDeploying)
				{
					<span class="flex items-center gap-2">
						<i class="fas fa-spinner fa-spin"></i>
						<span>部署中...</span>
					</span>
				}
				else if (LastDeploymentStatus != null)
				{
					<span class="flex items-center gap-2">
						<i class="@GetStatusIcon(LastDeploymentStatus) @GetStatusColor(LastDeploymentStatus)"></i>
						<span>上次部署: @LastDeploymentStatus</span>
					</span>
				}
				<span>@DeploymentLogs.Count 条日志</span>
			</div>
			<div>
				@if (LastDeploymentTime != null)
				{
					<span>@LastDeploymentTime?.ToString("yyyy-MM-dd HH:mm:ss")</span>
				}
			</div>
		</div>
	</div>

	<!-- 右侧部署历史 -->
	<div class="flex w-80 flex-col border-l border-slate-200 bg-white">
		<div class="flex h-14 items-center border-b border-slate-200 px-4">
			<h3 class="text-sm font-semibold text-slate-900">部署历史</h3>
		</div>

		<div class="scrollable flex-1 overflow-y-auto p-4">
			@if (DeploymentHistory.Any())
			{
				<div class="space-y-2">
					@foreach (var deployment in DeploymentHistory)
					{
						<div class="rounded-lg border border-slate-200 p-3 hover:bg-slate-50">
							<div class="mb-2 flex items-center justify-between">
								<span class="text-xs font-semibold text-slate-900">
									@deployment.Environment
								</span>
								<span class="@GetStatusBadgeClass(deployment.Status)">
									@deployment.Status
								</span>
							</div>
							<div class="mb-1 text-xs text-slate-600">
								@deployment.Target
							</div>
							<div class="flex items-center justify-between text-xs text-slate-500">
								<span>@deployment.Timestamp.ToString("MM-dd HH:mm")</span>
								<span>@deployment.Duration</span>
							</div>
						</div>
					}
				</div>
			}
			else
			{
				<div class="flex h-full items-center justify-center text-center text-sm text-slate-500">
					<div>
						<i class="fas fa-history mb-2 text-2xl"></i>
						<p>暂无部署历史</p>
					</div>
				</div>
			}
		</div>
	</div>
</div>

@code {
	[Parameter] public string ProjectId { get; set; } = "";

	private string SelectedTarget = "local";
	private string SelectedEnvironment = "development";
	private string BuildConfiguration = "Release";
	private bool RunMigrations = true;
	private bool RunTests = true;
	private bool BackupBeforeDeploy = true;
	private string ServerAddress = "";
	private string ServerUsername = "";

	private bool IsDeploying = false;
	private string? LastDeploymentStatus = null;
	private DateTime? LastDeploymentTime = null;

	private List<DeploymentLog> DeploymentLogs = new();
	private List<DeploymentRecord> DeploymentHistory = new();

	protected override async Task OnInitializedAsync()
	{
		await LoadDeploymentHistory();
	}

	private async Task LoadDeploymentHistory()
	{
		// 模拟加载部署历史
		DeploymentHistory = new List<DeploymentRecord>
		{
			new() { Environment = "Production", Target = "Azure", Status = "成功", Timestamp = DateTime.Now.AddHours(-2), Duration = "2分15秒" },
			new() { Environment = "Staging", Target = "Docker", Status = "成功", Timestamp = DateTime.Now.AddDays(-1), Duration = "1分48秒" },
			new() { Environment = "Development", Target = "本地", Status = "失败", Timestamp = DateTime.Now.AddDays(-2), Duration = "35秒" }
		};
		await Task.CompletedTask;
	}

	private async Task StartDeployment()
	{
		IsDeploying = true;
		DeploymentLogs.Clear();

		try
		{
			AddLog("info", "开始部署流程...");
			AddLog("info", $"目标: {SelectedTarget}");
			AddLog("info", $"环境: {SelectedEnvironment}");
			AddLog("info", $"配置: {BuildConfiguration}");

			await Task.Delay(500);

			if (RunTests)
			{
				AddLog("info", "运行测试...");
				await Task.Delay(1000);
				AddLog("success", "所有测试通过 ✓");
			}

			if (BackupBeforeDeploy)
			{
				AddLog("info", "创建备份...");
				await Task.Delay(800);
				AddLog("success", "备份完成 ✓");
			}

			AddLog("info", "构建项目...");
			await Task.Delay(1500);
			AddLog("success", "构建成功 ✓");

			if (RunMigrations)
			{
				AddLog("info", "运行数据库迁移...");
				await Task.Delay(1000);
				AddLog("success", "迁移完成 ✓");
			}

			AddLog("info", "部署应用程序...");
			await Task.Delay(2000);
			AddLog("success", "部署完成 ✓");

			AddLog("success", "========================================");
			AddLog("success", "部署成功！应用程序已启动并运行。");

			LastDeploymentStatus = "成功";
			LastDeploymentTime = DateTime.Now;
			ToastService.Success("部署成功！");

			await LoadDeploymentHistory();
		}
		catch (Exception ex)
		{
			AddLog("error", $"部署失败: {ex.Message}");
			LastDeploymentStatus = "失败";
			ToastService.Error("部署失败！");
		}
		finally
		{
			IsDeploying = false;
		}
	}

	private void AddLog(string level, string message)
	{
		DeploymentLogs.Add(new DeploymentLog
		{
			Level = level,
			Message = message,
			Timestamp = DateTime.Now
		});
		StateHasChanged();
	}

	private void ClearLogs()
	{
		DeploymentLogs.Clear();
	}

	private void DownloadLogs()
	{
		ToastService.Info("下载功能开发中...");
	}

	private string GetLogClass(string level) => level switch
	{
		"error" => "text-red-400",
		"warning" => "text-amber-400",
		"success" => "text-emerald-400",
		_ => "text-slate-300"
	};

	private string GetStatusIcon(string status) => status switch
	{
		"成功" => "fas fa-check-circle",
		"失败" => "fas fa-times-circle",
		_ => "fas fa-info-circle"
	};

	private string GetStatusColor(string status) => status switch
	{
		"成功" => "text-emerald-500",
		"失败" => "text-red-500",
		_ => "text-blue-500"
	};

	private string GetStatusBadgeClass(string status) => status switch
	{
		"成功" => "rounded bg-emerald-100 px-2 py-0.5 text-xs font-medium text-emerald-700",
		"失败" => "rounded bg-red-100 px-2 py-0.5 text-xs font-medium text-red-700",
		_ => "rounded bg-slate-100 px-2 py-0.5 text-xs font-medium text-slate-700"
	};

	class DeploymentLog
	{
		public string Level { get; set; } = "";
		public string Message { get; set; } = "";
		public DateTime Timestamp { get; set; }
	}

	class DeploymentRecord
	{
		public string Environment { get; set; } = "";
		public string Target { get; set; } = "";
		public string Status { get; set; } = "";
		public DateTime Timestamp { get; set; }
		public string Duration { get; set; } = "";
	}
}
