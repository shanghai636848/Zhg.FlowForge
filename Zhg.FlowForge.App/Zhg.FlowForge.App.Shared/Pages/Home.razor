@page "/"
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="bpmn-editor w-full h-screen flex flex-col">
    <!-- 头部 -->
    <header class="editor-header h-16 bg-white border-b border-gray-200 flex items-center px-6 flex-shrink-0 shadow-sm">
        <h1 class="text-lg font-semibold text-gray-800">BPMN 编辑器</h1>
    </header>

    <!-- 主要内容区域 -->
    <div class="editor-content flex-1 flex overflow-hidden p-4 gap-1">
        <!-- 左侧工具箱 -->
        <aside class="sidebar toolbox bg-white rounded-xl shadow-lg flex flex-col overflow-hidden transition-all duration-200 @(IsLeftPanelVisible ? "" : "hidden")"
               style="@GetLeftPanelStyle()" @ref="toolboxRef">
            <div class="p-4">🛠️ 工具箱</div>
        </aside>

        <!-- 左侧拖拽条 -->
        <div class="resizer w-0 relative cursor-col-resize"
             @onmousedown="StartLeftResize"
             @onmouseenter="() => HighlightSidebar(toolboxRef, true)"
             @onmouseleave="() => HighlightSidebar(toolboxRef, false)">
            <div class="absolute inset-y-0 -left-1.5 -right-1.5"></div>
        </div>

        <!-- 主画布区域 -->
        <main class="canvas-container flex-1 flex flex-col overflow-hidden bg-white rounded-xl shadow-lg min-w-300">
            <div class="flex-1 p-4">🎨 BPMN 画布区域</div>
        </main>

        <!-- 右侧拖拽条 -->
        <div class="resizer w-0 relative cursor-col-resize"
             @onmousedown="StartRightResize"
             @onmouseenter="() => HighlightSidebar(propertyPanelRef, true)"
             @onmouseleave="() => HighlightSidebar(propertyPanelRef, false)">
            <div class="absolute inset-y-0 -left-1.5 -right-1.5"></div>
        </div>

        <!-- 右侧属性面板 -->
        <aside class="sidebar property-panel bg-white rounded-xl shadow-lg flex flex-col overflow-hidden transition-all duration-200 @(IsRightPanelVisible ? "" : "hidden")"
               style="@GetRightPanelStyle()" @ref="propertyPanelRef">
            <div class="p-4">⚙️ 属性面板</div>
        </aside>
    </div>

    <!-- 底部 -->
    <footer class="editor-footer h-12 bg-white border-t border-gray-200 flex items-center px-6 flex-shrink-0">
        <span class="text-sm text-gray-500">© 2025 BPMN 编辑器</span>
    </footer>

    <!-- 左侧切换按钮 -->
    <button id="toggleLeft"
            class="sidebar-toggle left fixed top-1/2 -translate-y-1/2 z-1000 w-11 h-11 rounded-r-lg bg-gradient-135deg from-blue-500 to-blue-600 text-white border-none flex items-center justify-center cursor-pointer shadow-lg opacity-92 hover:opacity-100 @(IsLeftToggleVisible ? "" : "hidden")"
            title="工具箱" @onclick="ToggleLeftPanel">
        <i class="fas @LeftToggleIcon"></i>
    </button>

    <!-- 右侧切换按钮 -->
    <button id="toggleRight"
            class="sidebar-toggle right fixed top-1/2 -translate-y-1/2 right-4 z-1000 w-11 h-11 rounded-r-lg bg-gradient-135deg from-blue-500 to-blue-600 text-white border-none flex items-center justify-center cursor-pointer shadow-lg opacity-92 hover:opacity-100 @(IsRightToggleVisible ? "" : "hidden")"
            title="属性" @onclick="ToggleRightPanel">
        <i class="fas @RightToggleIcon"></i>
    </button>
</div>

<style>
    /* ========== UnoCSS 原子化类扩展 ========== */

    /* 动态根字体 - 响应式缩放基础 */
    html {
        font-size: 16px;
    }

    @@media (max-width: 1440px) {
        html {
            font-size: 15.5px;
        }
    }

    @@media (max-width: 1280px) {
        html {
            font-size: 15px;
        }
    }

    @@media (max-width: 1024px) {
        html {
            font-size: 14.5px;
        }
    }

    @@media (max-width: 900px) {
        html {
            font-size: 14px;
        }
    }

    @@media (max-width: 768px) {
        html {
            font-size: 13.5px;
        }
    }

    @@media (max-width: 640px) {
        html {
            font-size: 13px;
        }
    }

    @@media (max-width: 480px) {
        html {
            font-size: 12.5px;
        }
    }

    @@media (max-width: 375px) {
        html {
            font-size: 12px;
        }
    }

    @@media (max-width: 320px) {
        html {
            font-size: 11.5px;
        }
    }

    @@media (min-width: 1920px) {
        html {
            font-size: 17px;
        }
    }

    @@media (min-width: 2560px) {
        html {
            font-size: 18px;
        }
    }

    @@media (min-width: 3840px) {
        html {
            font-size: 20px;
        }
    }

    /* 容器系统 */
    .container {
        width: 100%;
        max-width: 100%;
        margin: 0 auto;
        padding-left: 2rem;
        padding-right: 2rem;
        box-sizing: border-box;
    }

    @@media (max-width: 320px) {
        .container {
            max-width: 320px;
            padding-left: 1rem;
            padding-right: 1rem;
        }
    }

    @@media (min-width: 321px) and (max-width: 374px) {
        .container {
            max-width: 375px;
        }
    }

    @@media (min-width: 375px) and (max-width: 479px) {
        .container {
            max-width: 480px;
        }
    }

    @@media (min-width: 480px) and (max-width: 639px) {
        .container {
            max-width: 640px;
        }
    }

    @@media (min-width: 640px) and (max-width: 767px) {
        .container {
            max-width: 768px;
        }
    }

    @@media (min-width: 768px) and (max-width: 899px) {
        .container {
            max-width: 900px;
        }
    }

    @@media (min-width: 900px) and (max-width: 1023px) {
        .container {
            max-width: 1024px;
        }
    }

    @@media (min-width: 1024px) and (max-width: 1279px) {
        .container {
            max-width: 1280px;
        }
    }

    @@media (min-width: 1280px) and (max-width: 1439px) {
        .container {
            max-width: 1440px;
        }
    }

    @@media (min-width: 1440px) and (max-width: 1919px) {
        .container {
            max-width: 1920px;
        }
    }

    @@media (min-width: 1920px) and (max-width: 2559px) {
        .container {
            max-width: 2560px;
        }
    }

    @@media (min-width: 2560px) and (max-width: 3839px) {
        .container {
            max-width: 3840px;
        }
    }

    @@media (min-width: 3840px) {
        .container {
            max-width: 100%;
        }
    }

    /* 自定义工具类 */
    .min-w-300 {
        min-width: 18.75rem;
    }
    /* 300px */
    .cursor-col-resize {
        cursor: col-resize;
    }

    .bg-gradient-135deg {
        background: linear-gradient(135deg, var(--tw-gradient-from), var(--tw-gradient-to));
    }

    /* 侧边栏高亮效果 */
    .sidebar.highlight {
        box-shadow: 0 0 0 0.125rem #eef2ff, 0 0.25rem 0.75rem rgba(0, 0, 0, 0.08);
        border: 0.0625rem solid #4361ee;
        z-index: 5;
    }

    /* 侧边栏隐藏状态 */
    .sidebar.hidden {
        width: 0 !important;
        min-width: 0 !important;
        max-width: 0 !important;
        opacity: 0;
        pointer-events: none;
    }

    /* 切换按钮隐藏状态 */
    .sidebar-toggle.hidden {
        display: none;
    }

    /* 移动端适配 */
    @@media (max-width: 767px) {
        .canvas-container {
            margin-left: 0.5rem;
            margin-right: 0.5rem;
        }
    }

    /* 全局样式重置 */
    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }

    body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        line-height: 1.6;
        color: #333;
        background-color: #f9fafb;
        overflow-x: hidden;
        width: 100%;
    }
</style>

@code {
    // 宽度配置常量（使用 rem 单位）
    private const double LEFT_MIN = 12.5; // 200px
    private const double LEFT_MAX = 25;   // 400px
    private const double RIGHT_MIN = 25;  // 400px
    private const double RIGHT_MAX = 50;  // 800px

    // 组件引用
    private ElementReference toolboxRef;
    private ElementReference propertyPanelRef;

    // 状态变量
    private double LeftPanelWidth { get; set; } = LEFT_MIN;
    private double RightPanelWidth { get; set; } = RIGHT_MIN;
    private bool IsLeftPanelVisible { get; set; } = true;
    private bool IsRightPanelVisible { get; set; } = true;
    private bool IsLeftToggleVisible { get; set; } = false;
    private bool IsRightToggleVisible { get; set; } = false;
    private string LeftToggleIcon { get; set; } = "fa-bars";
    private string RightToggleIcon { get; set; } = "fa-sliders-h";

    private bool IsRightPanelVisibleInTablet { get; set; } = false;
    private LayoutType CurrentLayout { get; set; } = LayoutType.Desktop;

    // 拖拽状态
    private bool IsLeftResizing { get; set; } = false;
    private bool IsRightResizing { get; set; } = false;

    private DotNetObjectReference<Home>? dotNetHelper;
    private bool _isInitialized = false;
    private bool _isClientSide = false;

    // 获取左侧面板样式
    private string GetLeftPanelStyle()
    {
        return IsLeftPanelVisible ? $"width: {LeftPanelWidth}rem;" : "";
    }

    // 获取右侧面板样式
    private string GetRightPanelStyle()
    {
        return IsRightPanelVisible ? $"width: {RightPanelWidth}rem;" : "";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isClientSide = true;
            dotNetHelper = DotNetObjectReference.Create(this);

            await InitializeJavaScript();
            await UpdateLayoutFromWindowSize();

            _isInitialized = true;
        }
    }

    // 初始化 JavaScript 功能
    private async Task InitializeJavaScript()
    {
        try
        {
            var js = @"
                window.bpmnEditor = {
                    dotNetHelper: null,
                    isLeftResizing: false,
                    isRightResizing: false,

                    initializeResize: function (netHelper) {
                        window.bpmnEditor.dotNetHelper = netHelper;
                        window.addEventListener('resize', window.bpmnEditor.handleResize);
                        document.addEventListener('mousemove', window.bpmnEditor.handleMouseMove);
                        document.addEventListener('mouseup', window.bpmnEditor.handleMouseUp);
                        window.bpmnEditor.handleResize();
                    },

                    getWindowWidth: function () {
                        return window.innerWidth;
                    },

                    highlightSidebar: function (sidebar, isHighlight) {
                        if (sidebar) {
                            if (isHighlight) {
                                sidebar.classList.add('highlight');
                            } else {
                                sidebar.classList.remove('highlight');
                            }
                        }
                    },

                    startLeftResize: function (netHelper, currentWidth) {
                        window.bpmnEditor.dotNetHelper = netHelper;
                        window.bpmnEditor.isLeftResizing = true;
                        document.body.style.userSelect = 'none';
                    },

                    startRightResize: function (netHelper, currentWidth) {
                        window.bpmnEditor.dotNetHelper = netHelper;
                        window.bpmnEditor.isRightResizing = true;
                        document.body.style.userSelect = 'none';
                    },

                    handleResize: function () {
                        if (window.bpmnEditor.dotNetHelper) {
                            window.bpmnEditor.dotNetHelper.invokeMethodAsync('HandleResize', window.innerWidth);
                        }
                    },

                    handleMouseMove: function (e) {
                        if (window.bpmnEditor.isLeftResizing) {
                            window.bpmnEditor.handleLeftResize(e);
                        } else if (window.bpmnEditor.isRightResizing) {
                            window.bpmnEditor.handleRightResize(e);
                        }
                    },

                    handleMouseUp: function () {
                        if (window.bpmnEditor.isLeftResizing || window.bpmnEditor.isRightResizing) {
                            window.bpmnEditor.isLeftResizing = false;
                            window.bpmnEditor.isRightResizing = false;
                            document.body.style.userSelect = '';
                        }
                    },

                    handleLeftResize: function (e) {
                        const container = document.querySelector('.editor-content');
                        if (!container) return;

                        const rect = container.getBoundingClientRect();
                        const paddingLeft = parseFloat(getComputedStyle(container).paddingLeft);
                        const newWidth = (e.clientX - rect.left - paddingLeft) / parseFloat(getComputedStyle(document.documentElement).fontSize);

                        if (window.bpmnEditor.dotNetHelper) {
                            window.bpmnEditor.dotNetHelper.invokeMethodAsync('HandleLeftResize', newWidth);
                        }
                    },

                    handleRightResize: function (e) {
                        const container = document.querySelector('.editor-content');
                        if (!container) return;

                        const rect = container.getBoundingClientRect();
                        const paddingRight = parseFloat(getComputedStyle(container).paddingRight);
                        const newWidth = (rect.right - e.clientX - paddingRight) / parseFloat(getComputedStyle(document.documentElement).fontSize);

                        if (window.bpmnEditor.dotNetHelper) {
                            window.bpmnEditor.dotNetHelper.invokeMethodAsync('HandleRightResize', newWidth);
                        }
                    },

                    dispose: function () {
                        window.removeEventListener('resize', window.bpmnEditor.handleResize);
                        document.removeEventListener('mousemove', window.bpmnEditor.handleMouseMove);
                        document.removeEventListener('mouseup', window.bpmnEditor.handleMouseUp);

                        if (window.bpmnEditor.dotNetHelper) {
                            window.bpmnEditor.dotNetHelper.dispose();
                        }
                    }
                };
            ";

            await JSRuntime.InvokeVoidAsync("eval", js);
            await JSRuntime.InvokeVoidAsync("bpmnEditor.initializeResize", dotNetHelper);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"JavaScript初始化异常: {ex.Message}");
        }
    }

    // 布局类型枚举
    private enum LayoutType
    {
        Desktop,
        Tablet,
        Mobile
    }

    // 从窗口大小更新布局
    private async Task UpdateLayoutFromWindowSize()
    {
        if (!_isClientSide) return;

        try
        {
            var windowWidth = await JSRuntime.InvokeAsync<double>("bpmnEditor.getWindowWidth");
            await HandleResize(windowWidth);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"窗口大小检测异常: {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task HandleResize(double windowWidth)
    {
        if (windowWidth >= 1280)
            CurrentLayout = LayoutType.Desktop;
        else if (windowWidth >= 768)
            CurrentLayout = LayoutType.Tablet;
        else
            CurrentLayout = LayoutType.Mobile;

        await ApplyLayout();
        StateHasChanged();
    }

    [JSInvokable]
    public async Task HandleLeftResize(double newWidth)
    {
        LeftPanelWidth = Math.Min(Math.Max(newWidth, LEFT_MIN), LEFT_MAX);
        StateHasChanged();
    }

    [JSInvokable]
    public async Task HandleRightResize(double newWidth)
    {
        RightPanelWidth = Math.Min(Math.Max(newWidth, RIGHT_MIN), RIGHT_MAX);
        StateHasChanged();
    }

    // 应用当前布局
    private async Task ApplyLayout()
    {
        switch (CurrentLayout)
        {
            case LayoutType.Desktop:
                IsLeftPanelVisible = true;
                IsRightPanelVisible = true;
                IsLeftToggleVisible = false;
                IsRightToggleVisible = false;
                IsRightPanelVisibleInTablet = false;

                if (LeftPanelWidth < LEFT_MIN) LeftPanelWidth = LEFT_MIN;
                if (RightPanelWidth < RIGHT_MIN) RightPanelWidth = RIGHT_MIN;
                break;

            case LayoutType.Tablet:
                IsLeftPanelVisible = true;
                IsLeftToggleVisible = false;
                IsRightPanelVisible = IsRightPanelVisibleInTablet;
                IsRightToggleVisible = true;

                if (IsRightPanelVisible && RightPanelWidth < RIGHT_MIN)
                    RightPanelWidth = RIGHT_MIN;
                break;

            case LayoutType.Mobile:
                IsLeftPanelVisible = false;
                IsRightPanelVisible = false;
                IsLeftToggleVisible = true;
                IsRightToggleVisible = true;
                await UpdateMobileIcons();
                break;
        }
    }

    // 更新移动端图标
    private async Task UpdateMobileIcons()
    {
        LeftToggleIcon = IsLeftPanelVisible ? "fa-times" : "fa-bars";
        RightToggleIcon = IsRightPanelVisible ? "fa-times" : "fa-sliders-h";
        StateHasChanged();
    }

    // 高亮侧边栏
    private async Task HighlightSidebar(ElementReference sidebar, bool isHighlight)
    {
        if (CurrentLayout != LayoutType.Desktop || !_isClientSide) return;

        try
        {
            await JSRuntime.InvokeVoidAsync("bpmnEditor.highlightSidebar", sidebar, isHighlight);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"高亮侧边栏异常: {ex.Message}");
        }
    }

    // 开始左侧拖拽
    private async Task StartLeftResize()
    {
        if (CurrentLayout != LayoutType.Desktop || !_isClientSide) return;

        try
        {
            IsLeftResizing = true;
            await JSRuntime.InvokeVoidAsync("bpmnEditor.startLeftResize", dotNetHelper, LeftPanelWidth);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"开始左侧拖拽异常: {ex.Message}");
        }
    }

    // 开始右侧拖拽
    private async Task StartRightResize()
    {
        if (CurrentLayout != LayoutType.Desktop || !_isClientSide) return;

        try
        {
            IsRightResizing = true;
            await JSRuntime.InvokeVoidAsync("bpmnEditor.startRightResize", dotNetHelper, RightPanelWidth);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"开始右侧拖拽异常: {ex.Message}");
        }
    }

    // 切换左侧面板
    private async Task ToggleLeftPanel()
    {
        if (CurrentLayout != LayoutType.Mobile) return;

        IsLeftPanelVisible = !IsLeftPanelVisible;
        if (IsLeftPanelVisible)
        {
            IsRightPanelVisible = false;
            LeftPanelWidth = LEFT_MIN;
        }
        await UpdateMobileIcons();
    }

    // 切换右侧面板
    private async Task ToggleRightPanel()
    {
        switch (CurrentLayout)
        {
            case LayoutType.Desktop:
                return;

            case LayoutType.Tablet:
                IsRightPanelVisibleInTablet = !IsRightPanelVisibleInTablet;
                IsRightPanelVisible = IsRightPanelVisibleInTablet;
                if (IsRightPanelVisible)
                {
                    RightPanelWidth = RIGHT_MIN;
                }
                break;

            case LayoutType.Mobile:
                IsRightPanelVisible = !IsRightPanelVisible;
                if (IsRightPanelVisible)
                {
                    IsLeftPanelVisible = false;
                    RightPanelWidth = RIGHT_MIN;
                }
                await UpdateMobileIcons();
                break;
        }
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (_isClientSide && _isInitialized)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("bpmnEditor.dispose");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"清理异常: {ex.Message}");
            }
        }
        dotNetHelper?.Dispose();
    }
}