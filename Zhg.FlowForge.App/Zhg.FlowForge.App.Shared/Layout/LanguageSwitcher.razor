@using Zhg.FlowForge.App.Shared.Interfaces
@using Zhg.FlowForge.App.Shared.Services
@inject ILocalizationService LocalizationService

<div class="relative">
    <button @onclick="ToggleLanguageDropdown"
            class="flex items-center gap-1 rounded border border-gray-600 px-3 py-1 transition-colors hover:bg-gray-700"
            title="@LocalizationService["menu.toggle"]">
        <span>🌐</span>
        <span class="text-sm">@GetCurrentLanguageName()</span>
        <span class="text-xs transition-transform @(showLanguageDropdown ? "rotate-180" : "")">▼</span>
    </button>

    @if (showLanguageDropdown)
    {
        <div class="absolute right-0 z-50 mt-1 max-h-60 w-40 overflow-y-auto rounded border border-gray-600 bg-gray-800 shadow-lg">
            @foreach (var lang in availableLanguages)
            {
                <button @onclick="() => ChangeLanguage(lang)"
                        class="w-full text-left px-3 py-2 hover:bg-gray-700 transition-colors flex items-center justify-between @(lang == LocalizationService.CurrentCultureName ? "bg-blue-600" : "")">
                    <span>@GetLanguageDisplayName(lang)</span>
                    @if (lang == LocalizationService.CurrentCultureName)
                    {
                        <span class="text-xs">✓</span>
                    }
                </button>
            }
        </div>
    }
</div>

@code {
    private bool showLanguageDropdown = false;
    private List<string> availableLanguages = new();
    private bool initialized = false;

    protected override async Task OnInitializedAsync()
    {
        LocalizationService.OnLanguageChanged += OnLanguageChanged;
        await LoadAvailableLanguages();
        initialized = true;
    }

    private async Task LoadAvailableLanguages()
    {
        availableLanguages = await LocalizationService.GetAvailableCulturesAsync();
        StateHasChanged();
    }

    private void OnLanguageChanged()
    {
        if (initialized)
            InvokeAsync(StateHasChanged);
    }

    private string GetCurrentLanguageName()
    {
        var cultureCode = LocalizationService.CurrentCultureName.Split('-')[0].ToLower();
        var key = $"language.{cultureCode}";
        var displayName = LocalizationService[key];
        return displayName != $"[{key}]" ? displayName : LocalizationService.CurrentCulture.NativeName;
    }

    private string GetLanguageDisplayName(string culture)
    {
        var cultureCode = culture.Split('-')[0].ToLower();
        var key = $"language.{cultureCode}";
        var displayName = LocalizationService[key];
        return displayName != $"[{key}]" ? displayName : culture;
    }

    private void ToggleLanguageDropdown()
    {
        showLanguageDropdown = !showLanguageDropdown;
    }

    private async Task ChangeLanguage(string culture)
    {
        await LocalizationService.SetLanguageAsync(culture);
        showLanguageDropdown = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        LocalizationService.OnLanguageChanged -= OnLanguageChanged;
    }
}