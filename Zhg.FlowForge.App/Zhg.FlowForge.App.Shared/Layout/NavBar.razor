@using Zhg.FlowForge.App.Shared.Interfaces
@using Zhg.FlowForge.App.Shared.Services

<div class="flex flex-1 flex-row items-center justify-between p-2 text-xs">
    <!-- 左侧 Logo -->
    <aside class="basis-1/5">
        @LocalizationService.GetString("logo.text")
    </aside>

    <!-- 桌面端导航菜单 -->
    <div class="flex flex-1 flex-row flex-wrap justify-center gap-6 whitespace-nowrap max-sm:hidden">
        @foreach (var navItem in GetLocalizedNavItems())
        {
            <a href="@navItem.Url" class="transition-colors hover:text-gray-300" @onclick:preventDefault @onclick="() => HandleNavClick(navItem)">
                @navItem.Text
            </a>
        }
    </div>

    <!-- 桌面端功能按钮和语言切换 -->
    <aside class="flex basis-1/5 items-center justify-end gap-4 max-sm:hidden">
        <!-- 语言切换器 -->
        <LanguageSwitcher />

        @foreach (var actionBtn in GetLocalizedActionButtons())
        {
            <button class="transition-colors hover:text-gray-300 @(actionBtn.IsPrimary ? "rounded bg-blue-600 px-3 py-1 hover:bg-blue-700" : "")"
                    @onclick="() => HandleActionClick(actionBtn)">
                @actionBtn.Text
            </button>
        }
    </aside>

    <!-- 汉堡包按钮 -->
    <button @onclick="ToggleMobileMenu" class="flex flex-col justify-center gap-1.5 p-2 focus:outline-none max-sm:flex sm:hidden">
        <span class="block h-0.5 w-6 bg-white transition-all @(isMenuOpen ? "rotate-45 translate-y-2" : "")"></span>
        <span class="block h-0.5 w-6 bg-white transition-all @(isMenuOpen ? "opacity-0" : "")"></span>
        <span class="block h-0.5 w-6 bg-white transition-all @(isMenuOpen ? "-rotate-45 -translate-y-2" : "")"></span>
    </button>
</div>

<!-- 移动端下拉菜单 -->
@if (isMenuOpen)
{
    <div class="bg-gray-800 p-4 text-white shadow-lg max-md:block">
        <div class="flex flex-col gap-4">
            <!-- 移动端导航链接 -->
            @foreach (var navItem in GetLocalizedNavItems())
            {
                <a href="@navItem.Url"
                   class="border-b border-gray-700 py-2 transition-colors hover:text-gray-300"
                   @onclick:preventDefault
                   @onclick="() => { HandleNavClick(navItem); ToggleMobileMenu(); }">
                    @navItem.Text
                </a>
            }

            <!-- 移动端语言切换 -->
            <div class="py-2">
                <LanguageSwitcher />
            </div>

            <!-- 移动端功能按钮 -->
            <div class="flex gap-4 pt-2">
                @foreach (var actionBtn in GetLocalizedActionButtons())
                {
                    <button class="flex-1 transition-colors hover:bg-gray-700 @(actionBtn.IsPrimary ? "rounded bg-blue-600 p-2 hover:bg-blue-700" : "rounded p-2")"
                            @onclick="() => HandleActionClick(actionBtn)">
                        @actionBtn.Text
                    </button>
                }
            </div>
        </div>
    </div>
}

@code {
    [Inject] private ILocalizationService LocalizationService { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;

    private bool isMenuOpen = false;
    private bool initialized = false;

    protected override async Task OnInitializedAsync()
    {
        // 确保本地化服务已初始化
        await LocalizationService.InitializeAsync();
        LocalizationService.OnLanguageChanged += OnLanguageChanged;
        initialized = true;
    }

    private void OnLanguageChanged()
    {
        if (initialized)
            InvokeAsync(StateHasChanged);
    }

    private List<NavItem> GetLocalizedNavItems()
    {
        return new List<NavItem>
        {
            new() { Text = LocalizationService.GetString("nav.home"), Url = "/" },
            new() { Text = LocalizationService.GetString("nav.products"), Url = "/products" },
            new() { Text = LocalizationService.GetString("nav.about"), Url = "/about" },
            new() { Text = LocalizationService.GetString("nav.contact"), Url = "/contact" }
        };
    }

    private List<ActionButton> GetLocalizedActionButtons()
    {
        return new List<ActionButton>
        {
            new() { Text = LocalizationService.GetString("action.login"), Url = "/login", IsPrimary = false },
            new() { Text = LocalizationService.GetString("action.register"), Url = "/register", IsPrimary = false }
        };
    }

    private void ToggleMobileMenu() => isMenuOpen = !isMenuOpen;

    private void HandleNavClick(NavItem item) => NavigationManager.NavigateTo(item.Url);

    private void HandleActionClick(ActionButton btn) => NavigationManager.NavigateTo(btn.Url);

    public void Dispose()
    {
        LocalizationService.OnLanguageChanged -= OnLanguageChanged;
    }

    // 模型类保持不变
    public class NavItem
    {
        public string Text { get; set; } = string.Empty;
        public string Url { get; set; } = string.Empty;
    }

    public class ActionButton
    {
        public string Text { get; set; } = string.Empty;
        public string Url { get; set; } = string.Empty;
        public bool IsPrimary { get; set; } = false;
    }
}